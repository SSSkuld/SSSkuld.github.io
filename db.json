{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/Chic/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/font.styl","path":"css/font.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/layout.styl","path":"css/layout.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/media.styl","path":"css/media.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/normalize.styl","path":"css/normalize.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/variable.styl","path":"css/variable.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/image/avatar.jpeg","path":"image/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/Chic/source/js/mathjax2.7.5.js","path":"js/mathjax2.7.5.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/demo_index.html","path":"fonts/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/demo.css","path":"fonts/iconfont/demo.css","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.css","path":"fonts/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.eot","path":"fonts/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.js","path":"fonts/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.json","path":"fonts/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.svg","path":"fonts/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.ttf","path":"fonts/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff","path":"fonts/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff2","path":"fonts/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.TTF","path":"fonts/lanting/lanting.TTF","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.eot","path":"fonts/lanting/lanting.eot","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.otf","path":"fonts/lanting/lanting.otf","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff","path":"fonts/lanting/lanting.woff","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff2","path":"fonts/lanting/lanting.woff2","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"e6c5e09c9f19847437c5acb69369894c508d4c51","modified":1600148229227},{"_id":"source/_posts/test.md","hash":"dcdcf49cdd2de1cb75495c7b08ab440b8c4d2dcf","modified":1625504870707},{"_id":"source/_posts/.DS_Store","hash":"efc1b90a49cdc305bb2ee1bcb4c3d054c8073227","modified":1600148928352},{"_id":"themes/Chic/LICENSE.md","hash":"9911bdafa287bd65a822f84cc12012980bd10247","modified":1600085217429},{"_id":"themes/Chic/README-CN.md","hash":"af0765f26b72d49f1b29afe1a9d0c4a492912aaa","modified":1600085217430},{"_id":"themes/Chic/_config.yml","hash":"38fbea5183f6bce9c5a8270e4e88ee5464805f47","modified":1638371398787},{"_id":"themes/Chic/ChangeLogs.md","hash":"82786c20871dd56447d872db9c16bd14b0cf01b8","modified":1600085217429},{"_id":"themes/Chic/README.md","hash":"e0bd27664e1d0b4ed1c8101d2bf69886c66c31d9","modified":1600085217430},{"_id":"themes/Chic/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1600085217430},{"_id":"themes/Chic/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1600085217430},{"_id":"themes/Chic/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1600085217430},{"_id":"themes/Chic/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1600085217430},{"_id":"themes/Chic/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1600085217430},{"_id":"themes/Chic/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1600085217431},{"_id":"themes/Chic/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1600085217431},{"_id":"themes/Chic/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1600085217431},{"_id":"themes/Chic/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1600085217431},{"_id":"themes/Chic/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1600085217431},{"_id":"themes/Chic/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1600085217431},{"_id":"themes/Chic/package.json","hash":"8b4072879307eed0e74ae35390825c5e03b9229c","modified":1600085217434},{"_id":"themes/Chic/.DS_Store","hash":"3f3a1c330022f977727012609debd856797b90ed","modified":1600146839519},{"_id":"themes/Chic/source/favicon.ico","hash":"45416a85d30bfe671e0fb5efb273118c4ee0496f","modified":1623750810319},{"_id":"themes/Chic/scripts/imageTag.js","hash":"4b69804c1e4bf638eda7022499c440ce24e28587","modified":1600085217435},{"_id":"themes/Chic/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1600085217431},{"_id":"themes/Chic/layout/.DS_Store","hash":"cfa5c6d2ec5f996d5cd0e6dae1d358c3f0a18e02","modified":1600139838968},{"_id":"themes/Chic/layout/archive.ejs","hash":"48cdf67b628eb6a1c24d484ed252f5b0e3f06ddf","modified":1600085217434},{"_id":"themes/Chic/layout/category.ejs","hash":"cae7483c92ff639f74f8efe67959f37c97350800","modified":1600085217434},{"_id":"themes/Chic/source/.DS_Store","hash":"faf9e0782b5ad48eee40804a3a2be2e3b3bd68f8","modified":1600139970970},{"_id":"themes/Chic/layout/index.ejs","hash":"b3344720176ad12dc88745cc5b31d497356ca4fa","modified":1600085217434},{"_id":"themes/Chic/layout/layout.ejs","hash":"f874320edabdefc204f9e17d119a16d16f26c363","modified":1600085217434},{"_id":"themes/Chic/layout/page.ejs","hash":"3179c527694a789760742e1923c7ac5f94b4997c","modified":1600085217434},{"_id":"themes/Chic/layout/post.ejs","hash":"a23f83d6c559ce88588472267468a54488d50e8e","modified":1600085217434},{"_id":"themes/Chic/layout/tag.ejs","hash":"d85ca78392be138b1589499cba95186b20c3a902","modified":1600085217434},{"_id":"themes/Chic/source/css/base.styl","hash":"7ea2db2c139a719bb7d3f3c5e182dd0e0d59e098","modified":1600085217451},{"_id":"themes/Chic/source/css/custom.styl","hash":"bf8dee1a094b104d87a53b43f6daa7ba43b67574","modified":1600085217451},{"_id":"themes/Chic/source/css/font.styl","hash":"8c1da30e223c0a3d7ef452abc9f0e4cc71dbc140","modified":1600085217451},{"_id":"themes/Chic/source/css/layout.styl","hash":"9942d05bb2c55cf035d4bf9af325e1e81766a510","modified":1600085217451},{"_id":"themes/Chic/source/css/media.styl","hash":"f96c0dbb9653667906a6dc271f637543ac5c7212","modified":1600085217451},{"_id":"themes/Chic/source/css/.DS_Store","hash":"a6b25bfb26cf633e8c5d0aca4aff7421e02a5e9a","modified":1600139861969},{"_id":"themes/Chic/source/fonts/.DS_Store","hash":"6f42bdb50e21f816210b084926b8418a6ce88af7","modified":1600092274634},{"_id":"themes/Chic/source/css/normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1600085217452},{"_id":"themes/Chic/source/css/style.styl","hash":"a13f2c38070a89b06a2ede599f5ce5fd160e11c9","modified":1600085217452},{"_id":"themes/Chic/source/css/variable.styl","hash":"906faa95457eba70118a0705e13b8f43409e502f","modified":1600085217452},{"_id":"themes/Chic/source/js/script.js","hash":"93694e4e16893f83611daa5ba3723b14ecc80abb","modified":1600085217539},{"_id":"themes/Chic/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1600085217539},{"_id":"themes/Chic/layout/_page/archive.ejs","hash":"464549286c92ea0d6cb057c6936e0f1a5d1c1dd2","modified":1600085217431},{"_id":"themes/Chic/layout/_page/category.ejs","hash":"e8464e11d08a711fe815ea1cd101aa41d7310ebf","modified":1600085217432},{"_id":"themes/Chic/source/image/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1600089514082},{"_id":"themes/Chic/layout/_page/post.ejs","hash":"6eb9cd3ee904e99ff78509298ae31a29fdbf49cf","modified":1600085217432},{"_id":"themes/Chic/layout/_page/page.ejs","hash":"1d875d59cf4d6b681cc8cf755f19b5355e5d1144","modified":1600085217432},{"_id":"themes/Chic/layout/_page/profile.ejs","hash":"c6d3cf2ef90e5d0fd580e7cff1db47c28fb36037","modified":1600085217432},{"_id":"themes/Chic/layout/_page/tag.ejs","hash":"0c20ff00532103f9a59639ca9956fc0bce4aabc2","modified":1600085217432},{"_id":"themes/Chic/source/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1600085217538},{"_id":"themes/Chic/layout/_plugins/mathjax.ejs","hash":"53f088fe44d51c4d9fb61aeac4c23b3cfcc19762","modified":1600085217433},{"_id":"themes/Chic/layout/_partial/head.ejs","hash":"8c8a2d95e0858cf0be9bf60d0ddf26876e1d9d35","modified":1600085217432},{"_id":"themes/Chic/layout/_partial/footer.ejs","hash":"e1c332fab0d6cd713e36d46ccc14d0991067ba40","modified":1600085217432},{"_id":"themes/Chic/layout/_partial/header.ejs","hash":"8f1e5272a4de96a3ed94de1db988b05b34515463","modified":1600085217433},{"_id":"themes/Chic/layout/_partial/paginator.ejs","hash":"ab59d5db77f2aa64dfe03656e72fd49702c62e23","modified":1600085217433},{"_id":"themes/Chic/layout/_partial/toc.ejs","hash":"10bb9c303c948f5615149981cd85cbbd3e7c781c","modified":1600085217433},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1600085217453},{"_id":"themes/Chic/source/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1600085217453},{"_id":"themes/Chic/source/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1600085217453},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1600085217453},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1600085217455},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.json","hash":"eae94b803d34035008842855d0bead92d2035281","modified":1600085217454},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1600085217454},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1600085217455},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1600085217454},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1600085217455},{"_id":"themes/Chic/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1600085217435},{"_id":"themes/Chic/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1600085217435},{"_id":"themes/Chic/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1600085217435},{"_id":"themes/Chic/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1600085217436},{"_id":"themes/Chic/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1600085217435},{"_id":"themes/Chic/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1600085217436},{"_id":"themes/Chic/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1600085217436},{"_id":"themes/Chic/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1600085217436},{"_id":"themes/Chic/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1600085217436},{"_id":"themes/Chic/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1600085217436},{"_id":"themes/Chic/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1600085217436},{"_id":"themes/Chic/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1600085217437},{"_id":"themes/Chic/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1600085217437},{"_id":"themes/Chic/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1600085217437},{"_id":"themes/Chic/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1600085217437},{"_id":"themes/Chic/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1600085217437},{"_id":"themes/Chic/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1600085217437},{"_id":"themes/Chic/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1600085217437},{"_id":"themes/Chic/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1600085217438},{"_id":"themes/Chic/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1600085217438},{"_id":"themes/Chic/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1600085217438},{"_id":"themes/Chic/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1600085217438},{"_id":"themes/Chic/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1600085217438},{"_id":"themes/Chic/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1600085217438},{"_id":"themes/Chic/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1600085217438},{"_id":"themes/Chic/source/css/_highlight/brown-paper.styl","hash":"329b85ae9130a5587a6fb1c6f80396f9cca5ddc1","modified":1600085217438},{"_id":"themes/Chic/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1600085217438},{"_id":"themes/Chic/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1600085217439},{"_id":"themes/Chic/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1600085217439},{"_id":"themes/Chic/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1600085217439},{"_id":"themes/Chic/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1600085217439},{"_id":"themes/Chic/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1600085217439},{"_id":"themes/Chic/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1600085217439},{"_id":"themes/Chic/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1600085217440},{"_id":"themes/Chic/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1600085217439},{"_id":"themes/Chic/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1600085217440},{"_id":"themes/Chic/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1600085217440},{"_id":"themes/Chic/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1600085217440},{"_id":"themes/Chic/source/css/_highlight/highlightjs.styl","hash":"65b5981dc3c57cedd1cb668c0e377230987e08d1","modified":1600085217440},{"_id":"themes/Chic/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1600085217440},{"_id":"themes/Chic/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1600085217441},{"_id":"themes/Chic/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1600085217441},{"_id":"themes/Chic/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1600085217441},{"_id":"themes/Chic/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1600085217441},{"_id":"themes/Chic/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1600085217442},{"_id":"themes/Chic/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1600085217441},{"_id":"themes/Chic/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1600085217442},{"_id":"themes/Chic/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1600085217442},{"_id":"themes/Chic/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1600085217442},{"_id":"themes/Chic/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1600085217442},{"_id":"themes/Chic/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1600085217443},{"_id":"themes/Chic/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1600085217443},{"_id":"themes/Chic/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1600085217443},{"_id":"themes/Chic/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1600085217443},{"_id":"themes/Chic/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1600085217443},{"_id":"themes/Chic/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1600085217444},{"_id":"themes/Chic/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1600085217444},{"_id":"themes/Chic/source/css/_highlight/pojoaque.styl","hash":"2601b4285803a7cea5ccded8d624ca95f80e3d88","modified":1600085217444},{"_id":"themes/Chic/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1600085217444},{"_id":"themes/Chic/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1600085217444},{"_id":"themes/Chic/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1600085217444},{"_id":"themes/Chic/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1600085217445},{"_id":"themes/Chic/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1600085217445},{"_id":"themes/Chic/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1600085217445},{"_id":"themes/Chic/source/css/_highlight/school-book.styl","hash":"beabbbcc7930f8de19159381a01c0ba41dc2291f","modified":1600085217445},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1600085217446},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1600085217446},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1600085217446},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1600085217446},{"_id":"themes/Chic/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1600085217446},{"_id":"themes/Chic/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1600085217446},{"_id":"themes/Chic/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1600085217447},{"_id":"themes/Chic/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1600085217447},{"_id":"themes/Chic/source/css/_lib/looper.css","hash":"863144dc9af7c1e181670515bc85eaf768f4e287","modified":1600085217447},{"_id":"themes/Chic/source/css/_lib/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1600085217447},{"_id":"themes/Chic/source/css/_page/archive.styl","hash":"71ea842f068b29b4418dd09450db09d27dcf0947","modified":1600085217449},{"_id":"themes/Chic/source/css/_page/category.styl","hash":"cead361269616b7a6ddec3090d9fa34c3c6ac722","modified":1600085217450},{"_id":"themes/Chic/source/css/_page/page.styl","hash":"34e33b52d2e046aa2f5494e81ff4ac2d5ca78058","modified":1600085217450},{"_id":"themes/Chic/source/css/_page/profile.styl","hash":"5ef6d5a06132f26b7aa01b2fbf4bbfb8ee862b7b","modified":1600085217450},{"_id":"themes/Chic/source/css/_page/tag.styl","hash":"55b220cc58011876fb3a470cd1fde8ed87c93079","modified":1600085217450},{"_id":"themes/Chic/source/css/_partial/footer.styl","hash":"4f58e607eaa59cda3b5a9fdb3404ffb75c4d1a03","modified":1600085217450},{"_id":"themes/Chic/source/css/_partial/header.styl","hash":"be70b4ab3bcc977f1055664899742804c716929d","modified":1600085217451},{"_id":"themes/Chic/source/css/_partial/paginator.styl","hash":"b4f4a5180c4cbc70d186792b8a1fd0f5855bd86a","modified":1600085217451},{"_id":"themes/Chic/source/css/_page/.DS_Store","hash":"c89d2ef3b87043adc4b04d1d2e8a6c33895f6e5b","modified":1600139965952},{"_id":"themes/Chic/source/css/_page/_post/post_code.styl","hash":"06c3a3524ffd4b27e03e79489001997ea5d727d3","modified":1600085217448},{"_id":"themes/Chic/source/css/_page/_post/post_content.styl","hash":"5e3d63077549d8e2e5ff8c452e809760f5a99c17","modified":1600085217448},{"_id":"themes/Chic/source/css/_page/_post/post_header.styl","hash":"d37b032bc5edca92c84bf62070a28fa40939df55","modified":1600085217449},{"_id":"themes/Chic/source/css/_page/_post/post_copyright.styl","hash":"64fd9f07ed45f035057d46740af0db70218714aa","modified":1600085217448},{"_id":"themes/Chic/source/css/_page/_post/post_nav.styl","hash":"03accaba13c995cbe65a05a88549ff74e992eb3f","modified":1600085217449},{"_id":"themes/Chic/source/css/_page/_post/post_tags.styl","hash":"2ff93677aa4d81da83c659b4dd4e3cb482d9ce7d","modified":1600085217449},{"_id":"themes/Chic/source/css/_page/_post/post_toc.styl","hash":"15e1ec7af93f41184f986aba21991a79923b0a0e","modified":1600085217449},{"_id":"themes/Chic/source/image/avatar.jpeg","hash":"fa746eb12b2e2ccda1824e2429d065d2305fc6a8","modified":1600089283000},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1600085217537},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1600085217534},{"_id":"themes/Chic/source/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1600085217497},{"_id":"themes/Chic/source/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1600085217475},{"_id":"themes/Chic/source/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1600085217530},{"_id":"public/archives/index.html","hash":"d2c7aaf4fa36c09e3736ccf2de980b9fe1756829","modified":1638794095643},{"_id":"public/archives/2020/index.html","hash":"c3918421bad658d47aca50fe8856c1e5798a3b7b","modified":1623827145715},{"_id":"public/2020/09/15/test/index.html","hash":"f14fb0046d4ffe8d25b4493ec1cdbca51618efd2","modified":1637254218922},{"_id":"public/archives/2020/09/index.html","hash":"2691bee54f581f90da4a3f25fb38f90c7c6b1c1d","modified":1623827145715},{"_id":"public/index.html","hash":"8aa8d6fd258bdb9975bfb64d11f78055b424f70a","modified":1638371403049},{"_id":"public/tags/none/index.html","hash":"434e89f34ba172a755ce00277c69caa882b083e7","modified":1600148952112},{"_id":"public/favicon.ico","hash":"45416a85d30bfe671e0fb5efb273118c4ee0496f","modified":1638794331436},{"_id":"public/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1600148952112},{"_id":"public/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1637563267944},{"_id":"public/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1600148952112},{"_id":"public/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1600148952112},{"_id":"public/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1600148952112},{"_id":"public/image/avatar.jpeg","hash":"fa746eb12b2e2ccda1824e2429d065d2305fc6a8","modified":1600148952112},{"_id":"public/css/base.css","hash":"ea2d491ce6242c6b7087a2652a1135694c292137","modified":1600148952112},{"_id":"public/css/font.css","hash":"87059edd1f2bfc4296f5599e73208893f2b06458","modified":1600148952112},{"_id":"public/css/custom.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600148952112},{"_id":"public/css/media.css","hash":"5023ee404900a47d61ca0591b2d4e9eace0fe88e","modified":1600148952112},{"_id":"public/css/normalize.css","hash":"2d4b663b6a4c68295b6ba240fa2dd9fb3863093c","modified":1600148952112},{"_id":"public/css/layout.css","hash":"c81e2e01ff5e95a3e613064b8490045ff936c305","modified":1600148952112},{"_id":"public/css/variable.css","hash":"cb4180b3bbad471e30cf52ebb40e998d58a30d7d","modified":1600148952112},{"_id":"public/js/script.js","hash":"93694e4e16893f83611daa5ba3723b14ecc80abb","modified":1600148952112},{"_id":"public/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1600148952112},{"_id":"public/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1600148952112},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1600148952112},{"_id":"public/fonts/iconfont/iconfont.json","hash":"3123aa840109e385d58a75d34e88a2d621e1ada8","modified":1600148952112},{"_id":"public/css/style.css","hash":"534ca54902458408412998bd6254ecfb3c50ad35","modified":1600148952112},{"_id":"public/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1600148952112},{"_id":"public/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1600148952112},{"_id":"public/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1600148952112},{"_id":"public/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1600148952112},{"_id":"public/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1600148952112},{"_id":"public/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1600148952112},{"_id":"public/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1600148952112},{"_id":"public/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1600148952112},{"_id":"source/about.md","hash":"915a498c94404b54262bfdb1f2ab39ea10a9333b","modified":1638794431922},{"_id":"public/about.html","hash":"1adcd846719dc19b33ed31fd261d6595df3b1268","modified":1638794501801},{"_id":"source/_posts/Windows-Clion环境搭建.md","hash":"ac6f380105ab4620c048933644d4104307593dd3","modified":1638794080613},{"_id":"public/2021/11/19/Windows-Clion环境搭建/index.html","hash":"775338d8c33a78081ae1c94f7d937622ebc44140","modified":1638794095643},{"_id":"public/archives/2021/index.html","hash":"cc26cea6a66ff975dfaff3e552a2679334499bac","modified":1638794095643},{"_id":"public/archives/2021/11/index.html","hash":"efe6afe0e8aa44d6e49a57f0c0b0e1cd0ac233f3","modified":1638371403049},{"_id":"public/tags/Linux/index.html","hash":"09ac0969fb5b49dd05fa40605c2e6edc783e0a6b","modified":1638371403049},{"_id":"source/_posts/基于objc4的Runtime原理解读（一）.md","hash":"779517403f797b94eda8b245dc47c9ba1f9a8b27","modified":1638794470205},{"_id":"source/_posts/基于objc4的Runtime原理解读（一）/isa_t.png","hash":"c6eef0fe26188074ed8ba4a50b10257e40e071d6","modified":1638281620996},{"_id":"public/2021/11/30/基于objc4的Runtime原理解读（一）/index.html","hash":"a87891530d977641dbbe4ed082c2215a640312e9","modified":1638794501801},{"_id":"public/2021/11/30/基于objc4的Runtime原理解读（一）/isa_t.png","hash":"c6eef0fe26188074ed8ba4a50b10257e40e071d6","modified":1638283805679},{"_id":"source/_posts/基于objc4的Runtime原理解读（一）/ro.png","hash":"2946cf24f09aa4f85475562be87ac879878763c1","modified":1638369255429},{"_id":"source/_posts/基于objc4的Runtime原理解读（一）/rw.png","hash":"ffdd86098e404d9b5552df54a44b64434ea756be","modified":1638369268626},{"_id":"source/_posts/基于objc4的Runtime原理解读（一）/class.png","hash":"ab0ce38e181f98a5cae8c3d954a646105f4176a2","modified":1638283877982},{"_id":"public/2021/11/30/基于objc4的Runtime原理解读（一）/ro.png","hash":"2946cf24f09aa4f85475562be87ac879878763c1","modified":1638369318448},{"_id":"public/2021/11/30/基于objc4的Runtime原理解读（一）/rw.png","hash":"ffdd86098e404d9b5552df54a44b64434ea756be","modified":1638369318448},{"_id":"public/2021/11/30/基于objc4的Runtime原理解读（一）/class.png","hash":"ab0ce38e181f98a5cae8c3d954a646105f4176a2","modified":1638369318448},{"_id":"source/_posts/基于objc4的Runtime原理解读（一）/summary.png","hash":"4b8778b6fd6e74610893142ef138585ab1959fdd","modified":1638370359796},{"_id":"public/tags/iOS/index.html","hash":"13f2e23aff6bdb8967926ccf645b13cf399a0aa3","modified":1638889587446},{"_id":"public/2021/11/30/基于objc4的Runtime原理解读（一）/summary.png","hash":"4b8778b6fd6e74610893142ef138585ab1959fdd","modified":1638370439217},{"_id":"source/tags/index.md","hash":"266c68c0b13742411ec5d5f3f566897be9b23a8e","modified":1638370837104},{"_id":"public/tags/index.html","hash":"c57e9afb18cd823d2a83086baf159efa7a38c3f2","modified":1638371087807},{"_id":"source/tag/index.md","hash":"bc6a8c4a2e7a1dc15f7bb80b6c3c94f303fba335","modified":1638371388623},{"_id":"public/tag/index.html","hash":"bcfbb8b34f03c4b2d7700a32b18c9cd286d2debe","modified":1638889587446},{"_id":"source/category/index.md","hash":"9b6c3c93e9ac4cff13325adaafc0cb561e7ca0a6","modified":1638371463998},{"_id":"public/category/index.html","hash":"d6ccf434232efea30dd4835a342ad3367b3d792d","modified":1638889587446},{"_id":"source/CNAME","hash":"fe06635540d31c7b4869b3e01781ba65749bf9ec","modified":1638371546267},{"_id":"public/CNAME","hash":"fe06635540d31c7b4869b3e01781ba65749bf9ec","modified":1638371557999},{"_id":"source/_posts/基于objc4的Runtime原理解读（二）.md","hash":"df5568f5f86609cc57272a2334430f0f1fff7674","modified":1638889581918},{"_id":"public/2021/12/06/基于objc4的Runtime原理解读（二）/index.html","hash":"f2b0b3d3175e7b3eab4e5d5194644bf189f7a784","modified":1638889587446},{"_id":"public/archives/2021/12/index.html","hash":"6f08fb160ab5708d4acdd0299cf3117f0079c4c1","modified":1638794095643},{"_id":"public/categories/Linux/index.html","hash":"514409d08835b7968ddd14ed253a3e8a515b0b0f","modified":1638794095643},{"_id":"public/categories/iOS/index.html","hash":"a236f4f0cf17e2c0610ab18064305810f04a0945","modified":1638889587446},{"_id":"public/tags/CLion/index.html","hash":"dbb86cf62120028ea7fc4d2e060f7f1361d02da4","modified":1638794095643},{"_id":"public/tags/WSL/index.html","hash":"f077da11105e4dec148a1cac49325b26950b5dc7","modified":1638794095643},{"_id":"public/tags/objective-c/index.html","hash":"e49d72f1b2b6b2a3e8a8025f7cde020575df5971","modified":1638889587446},{"_id":"public/tags/runtime/index.html","hash":"1c620ccc7d39c10e4f25f41790fcd84c1fcb7326","modified":1638889587446},{"_id":"source/_posts/基于objc4的Runtime原理解读（二）/class.png","hash":"5ff134d19352d15c760f5635d957faf5b359b746","modified":1638801309039},{"_id":"public/2021/12/06/基于objc4的Runtime原理解读（二）/class.png","hash":"5ff134d19352d15c760f5635d957faf5b359b746","modified":1638889587446}],"Category":[{"name":"Linux","_id":"ckwunoxbd00000bmjdueq4nij"},{"name":"iOS","_id":"ckwunoxbg00030bmjb84hbuje"}],"Data":[],"Page":[{"title":"About me","date":"2021-06-17T12:23:21.000Z","_content":"\n邮箱：skuldchoi@qq.com\n\n微信：skuld9102\n\n多思考，多总结。","source":"about.md","raw":"---\ntitle: About me\ndate: 2021-06-17 20:23:21\n---\n\n邮箱：skuldchoi@qq.com\n\n微信：skuld9102\n\n多思考，多总结。","updated":"2021-12-06T12:40:31.922Z","path":"about.html","_id":"ckq0w7bp40000q0mj1frkcg3p","comments":1,"layout":"page","content":"<p>邮箱：<a href=\"mailto:&#x73;&#x6b;&#x75;&#108;&#x64;&#x63;&#x68;&#111;&#105;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;\">&#x73;&#x6b;&#x75;&#108;&#x64;&#x63;&#x68;&#111;&#105;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n<p>微信：skuld9102</p>\n<p>多思考，多总结。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>邮箱：<a href=\"mailto:&#x73;&#x6b;&#x75;&#108;&#x64;&#x63;&#x68;&#111;&#105;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;\">&#x73;&#x6b;&#x75;&#108;&#x64;&#x63;&#x68;&#111;&#105;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n<p>微信：skuld9102</p>\n<p>多思考，多总结。</p>\n"},{"title":"tag","date":"2021-12-01T15:09:33.000Z","layout":"tag","_content":"","source":"tag/index.md","raw":"---\ntitle: tag\ndate: 2021-12-01 23:09:33\nlayout: tag\n---\n","updated":"2021-12-01T15:09:48.623Z","path":"tag/index.html","comments":1,"_id":"ckwno15ir0000immjdxcz94fl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"category","date":"2021-12-01T15:10:51.000Z","layout":"category","_content":"","source":"category/index.md","raw":"---\ntitle: category\ndate: 2021-12-01 23:10:51\nlayout: category\n---\n","updated":"2021-12-01T15:11:03.998Z","path":"category/index.html","comments":1,"_id":"ckwno2r710000m0mja3add430","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Windows+Clion环境搭建","date":"2021-11-18T16:23:57.000Z","_content":"## 背景\n最近开始学习网络编程，自己的Windows主机上一直没有搭建相关的开发环境，下载Clion后发现缺少一系列的编译工具链。网上查阅资料后，发现使用Windows的WSL工具，不用安装虚拟机就可以方便的拥有一个Linux环境，并且CLion也可以在这个环境下进行编译。\n\n一通尝试下来发现确实方便，Windows+WSL+CLion的工具环境轻量又好用，应该是以后在家的主要工作环境了。\n## 步骤\n### 1.开启WSL\n按 Win+X, 找到 Windows PowerShell (管理员)，并复制执行命令。\n\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\n\n这个命令会激活WSL功能，之后需要重启电脑。\n重启电脑之后，win+R，输入 appwiz.cpl，左上角找到“启动或关闭 Windows 功能”，会看到“适用于Linux的Windows子系统”选项处于选中状态。\n\n其实之前这个命令就相当于手动打开这个选中项。\n### 2.安装WSL发行版本\n在微软应用商城里搜索Ubuntu，选择一个合适的版本安装即可，这里推荐安装Ubuntu 20.04 LTS。\n\n依次获取、安装，国内网络环境下微软应用商店可能存在些延迟，耐心等一下或者翻墙下载均可。\n\n安装完后，打开Ubuntu即可，按照提示依次设置好用户名和密码即可。\n\n接下来可以进行一些Linux常规的环境配置。\n\n首先进行apt换源，我使用的是阿里云镜像。\n\n<b>\n【⚠】首先需要备份一下sources.list文件，很重要不要跳过。\n\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.backup\n</b>\n\n之后执行vim /etc/apt/sources.list，替换文件内容即可。\n\ndeb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse\n\n之后更新软件\nsudo apt-get update\nsudo apt-get upgrade\n\n注意，此时如果对sources.list文件操作不当，可能会触发如下报错：\nMalformed line 1 in source list /etc/apt/sources.list (type)\nThe list of sources could not be read.\n\n此时前往/etc/apt目录下，执行 sudo rm sources.list 删除文件\n之后sudo touch sources.list\n打开文件，将替换内容复制进去并保存即可。\n### 3.CLion编译环境配置\n打开CLion项目，会提示编译工具链缺失。\n\n选择环境为WSL，CLion会自动检查对应工具的缺失情况，根据报错，缺少哪个，在Ubuntu的终端中对应下载即可。\n\n至此整个流程结束，整个搭建流程还是很快速的。\n\n\n\n\n","source":"_posts/Windows-Clion环境搭建.md","raw":"---\ntitle: Windows+Clion环境搭建\ndate: 2021-11-19 00:23:57\ntags: \n- Linux\n- CLion\n- WSL\ncategories: Linux\n---\n## 背景\n最近开始学习网络编程，自己的Windows主机上一直没有搭建相关的开发环境，下载Clion后发现缺少一系列的编译工具链。网上查阅资料后，发现使用Windows的WSL工具，不用安装虚拟机就可以方便的拥有一个Linux环境，并且CLion也可以在这个环境下进行编译。\n\n一通尝试下来发现确实方便，Windows+WSL+CLion的工具环境轻量又好用，应该是以后在家的主要工作环境了。\n## 步骤\n### 1.开启WSL\n按 Win+X, 找到 Windows PowerShell (管理员)，并复制执行命令。\n\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\n\n这个命令会激活WSL功能，之后需要重启电脑。\n重启电脑之后，win+R，输入 appwiz.cpl，左上角找到“启动或关闭 Windows 功能”，会看到“适用于Linux的Windows子系统”选项处于选中状态。\n\n其实之前这个命令就相当于手动打开这个选中项。\n### 2.安装WSL发行版本\n在微软应用商城里搜索Ubuntu，选择一个合适的版本安装即可，这里推荐安装Ubuntu 20.04 LTS。\n\n依次获取、安装，国内网络环境下微软应用商店可能存在些延迟，耐心等一下或者翻墙下载均可。\n\n安装完后，打开Ubuntu即可，按照提示依次设置好用户名和密码即可。\n\n接下来可以进行一些Linux常规的环境配置。\n\n首先进行apt换源，我使用的是阿里云镜像。\n\n<b>\n【⚠】首先需要备份一下sources.list文件，很重要不要跳过。\n\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.backup\n</b>\n\n之后执行vim /etc/apt/sources.list，替换文件内容即可。\n\ndeb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse\n\n之后更新软件\nsudo apt-get update\nsudo apt-get upgrade\n\n注意，此时如果对sources.list文件操作不当，可能会触发如下报错：\nMalformed line 1 in source list /etc/apt/sources.list (type)\nThe list of sources could not be read.\n\n此时前往/etc/apt目录下，执行 sudo rm sources.list 删除文件\n之后sudo touch sources.list\n打开文件，将替换内容复制进去并保存即可。\n### 3.CLion编译环境配置\n打开CLion项目，会提示编译工具链缺失。\n\n选择环境为WSL，CLion会自动检查对应工具的缺失情况，根据报错，缺少哪个，在Ubuntu的终端中对应下载即可。\n\n至此整个流程结束，整个搭建流程还是很快速的。\n\n\n\n\n","slug":"Windows-Clion环境搭建","published":1,"updated":"2021-12-06T12:34:40.613Z","_id":"ckw56w0wh0000j8t80sob8nzw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近开始学习网络编程，自己的Windows主机上一直没有搭建相关的开发环境，下载Clion后发现缺少一系列的编译工具链。网上查阅资料后，发现使用Windows的WSL工具，不用安装虚拟机就可以方便的拥有一个Linux环境，并且CLion也可以在这个环境下进行编译。</p>\n<p>一通尝试下来发现确实方便，Windows+WSL+CLion的工具环境轻量又好用，应该是以后在家的主要工作环境了。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"1-开启WSL\"><a href=\"#1-开启WSL\" class=\"headerlink\" title=\"1.开启WSL\"></a>1.开启WSL</h3><p>按 Win+X, 找到 Windows PowerShell (管理员)，并复制执行命令。</p>\n<p>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</p>\n<p>这个命令会激活WSL功能，之后需要重启电脑。<br>重启电脑之后，win+R，输入 appwiz.cpl，左上角找到“启动或关闭 Windows 功能”，会看到“适用于Linux的Windows子系统”选项处于选中状态。</p>\n<p>其实之前这个命令就相当于手动打开这个选中项。</p>\n<h3 id=\"2-安装WSL发行版本\"><a href=\"#2-安装WSL发行版本\" class=\"headerlink\" title=\"2.安装WSL发行版本\"></a>2.安装WSL发行版本</h3><p>在微软应用商城里搜索Ubuntu，选择一个合适的版本安装即可，这里推荐安装Ubuntu 20.04 LTS。</p>\n<p>依次获取、安装，国内网络环境下微软应用商店可能存在些延迟，耐心等一下或者翻墙下载均可。</p>\n<p>安装完后，打开Ubuntu即可，按照提示依次设置好用户名和密码即可。</p>\n<p>接下来可以进行一些Linux常规的环境配置。</p>\n<p>首先进行apt换源，我使用的是阿里云镜像。</p>\n<b>\n【⚠】首先需要备份一下sources.list文件，很重要不要跳过。\n\n<p>sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup<br></b></p>\n<p>之后执行vim /etc/apt/sources.list，替换文件内容即可。</p>\n<p>deb <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal main restricted universe multiverse<br>deb-src <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal main restricted universe multiverse<br>deb <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-security main restricted universe multiverse<br>deb-src <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-security main restricted universe multiverse<br>deb <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-updates main restricted universe multiverse<br>deb-src <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-updates main restricted universe multiverse<br>deb <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-proposed main restricted universe multiverse<br>deb-src <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-proposed main restricted universe multiverse<br>deb <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-backports main restricted universe multiverse<br>deb-src <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-backports main restricted universe multiverse</p>\n<p>之后更新软件<br>sudo apt-get update<br>sudo apt-get upgrade</p>\n<p>注意，此时如果对sources.list文件操作不当，可能会触发如下报错：<br>Malformed line 1 in source list /etc/apt/sources.list (type)<br>The list of sources could not be read.</p>\n<p>此时前往/etc/apt目录下，执行 sudo rm sources.list 删除文件<br>之后sudo touch sources.list<br>打开文件，将替换内容复制进去并保存即可。</p>\n<h3 id=\"3-CLion编译环境配置\"><a href=\"#3-CLion编译环境配置\" class=\"headerlink\" title=\"3.CLion编译环境配置\"></a>3.CLion编译环境配置</h3><p>打开CLion项目，会提示编译工具链缺失。</p>\n<p>选择环境为WSL，CLion会自动检查对应工具的缺失情况，根据报错，缺少哪个，在Ubuntu的终端中对应下载即可。</p>\n<p>至此整个流程结束，整个搭建流程还是很快速的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近开始学习网络编程，自己的Windows主机上一直没有搭建相关的开发环境，下载Clion后发现缺少一系列的编译工具链。网上查阅资料后，发现使用Windows的WSL工具，不用安装虚拟机就可以方便的拥有一个Linux环境，并且CLion也可以在这个环境下进行编译。</p>\n<p>一通尝试下来发现确实方便，Windows+WSL+CLion的工具环境轻量又好用，应该是以后在家的主要工作环境了。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"1-开启WSL\"><a href=\"#1-开启WSL\" class=\"headerlink\" title=\"1.开启WSL\"></a>1.开启WSL</h3><p>按 Win+X, 找到 Windows PowerShell (管理员)，并复制执行命令。</p>\n<p>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</p>\n<p>这个命令会激活WSL功能，之后需要重启电脑。<br>重启电脑之后，win+R，输入 appwiz.cpl，左上角找到“启动或关闭 Windows 功能”，会看到“适用于Linux的Windows子系统”选项处于选中状态。</p>\n<p>其实之前这个命令就相当于手动打开这个选中项。</p>\n<h3 id=\"2-安装WSL发行版本\"><a href=\"#2-安装WSL发行版本\" class=\"headerlink\" title=\"2.安装WSL发行版本\"></a>2.安装WSL发行版本</h3><p>在微软应用商城里搜索Ubuntu，选择一个合适的版本安装即可，这里推荐安装Ubuntu 20.04 LTS。</p>\n<p>依次获取、安装，国内网络环境下微软应用商店可能存在些延迟，耐心等一下或者翻墙下载均可。</p>\n<p>安装完后，打开Ubuntu即可，按照提示依次设置好用户名和密码即可。</p>\n<p>接下来可以进行一些Linux常规的环境配置。</p>\n<p>首先进行apt换源，我使用的是阿里云镜像。</p>\n<b>\n【⚠】首先需要备份一下sources.list文件，很重要不要跳过。\n\n<p>sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup<br></b></p>\n<p>之后执行vim /etc/apt/sources.list，替换文件内容即可。</p>\n<p>deb <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal main restricted universe multiverse<br>deb-src <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal main restricted universe multiverse<br>deb <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-security main restricted universe multiverse<br>deb-src <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-security main restricted universe multiverse<br>deb <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-updates main restricted universe multiverse<br>deb-src <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-updates main restricted universe multiverse<br>deb <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-proposed main restricted universe multiverse<br>deb-src <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-proposed main restricted universe multiverse<br>deb <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-backports main restricted universe multiverse<br>deb-src <a href=\"http://mirrors.aliyun.com/ubuntu/\">http://mirrors.aliyun.com/ubuntu/</a> focal-backports main restricted universe multiverse</p>\n<p>之后更新软件<br>sudo apt-get update<br>sudo apt-get upgrade</p>\n<p>注意，此时如果对sources.list文件操作不当，可能会触发如下报错：<br>Malformed line 1 in source list /etc/apt/sources.list (type)<br>The list of sources could not be read.</p>\n<p>此时前往/etc/apt目录下，执行 sudo rm sources.list 删除文件<br>之后sudo touch sources.list<br>打开文件，将替换内容复制进去并保存即可。</p>\n<h3 id=\"3-CLion编译环境配置\"><a href=\"#3-CLion编译环境配置\" class=\"headerlink\" title=\"3.CLion编译环境配置\"></a>3.CLion编译环境配置</h3><p>打开CLion项目，会提示编译工具链缺失。</p>\n<p>选择环境为WSL，CLion会自动检查对应工具的缺失情况，根据报错，缺少哪个，在Ubuntu的终端中对应下载即可。</p>\n<p>至此整个流程结束，整个搭建流程还是很快速的。</p>\n"},{"title":"基于objc4的Runtime原理解读（一）","date":"2021-11-30T14:45:52.000Z","_content":"## 前言\n学习objective-c，runtime一直是一个绕不过去的话题，为什么iOS系统开发选择使用oc而不是c++呢？原因就是runtime这一大利器。\n\n> The Objective-C language defers as many decisions as it can from compile time and link time to runtime. Whenever possible, it does things dynamically. This means that the language requires not just a compiler, but also a runtime system to execute the compiled code. The runtime system acts as a kind of operating system for the Objective-C language; it’s what makes the language work.\n\nRuntime有两个版本，一个Legacy版本 ，一个Modern版本。Legacy版本使用的是Objective-c 1，也是大多数人所了解过的runtime版本，而Modern版本则使用了Objective-c 2.0。\n- iPhone applications and 64-bit programs on OS X v10.5 and later use the modern version of the runtime.\n- Other programs (32-bit programs on OS X desktop) use the legacy version of the runtime.\n\n网上有很多资料介绍的都是Legacy版本下的runtime源码，但实际上现在已经几乎没有任何程序基于此版本的runtime执行了。\n\n接下来的内容，我将以苹果最新开源的[objc4版本的源码](https://opensource.apple.com/source/objc4/)，对runtime相关知识进行介绍。\n\n## 从类说起\n\n### objc_object\n\n```\n<objc-private.h>\n\ntypedef struct objc_class *Class;\ntypedef struct objc_object *id;\n\nstruct objc_object {\nprivate:\n    isa_t isa;\n}\n\n\nunion isa_t {\n    isa_t() { }\n    isa_t(uintptr_t value) : bits(value) { }\n\n    uintptr_t bits;\n\nprivate:\n    // Accessing the class requires custom ptrauth operations, so\n    // force clients to go through setClass/getClass by making this\n    // private.\n    Class cls;\n\npublic:\n#if defined(ISA_BITFIELD)\n    struct {\n        ISA_BITFIELD;  // defined in isa.h\n    };\n\n}\n```\nobjc_object就是oc中最基础的类型，id类型其实也是一个指向objc_object类型的指针。可以看到，objc_object结构体中只有isa_t类型的isa指针。\n\n而isa_t则是一个共用体，里面不止存在指向Class类型的指针cls，还存在bits这样一个指针，使用位域技术存储了更多信息。bits指针根据不同的架构，存储了不同的内容，下面举arm64架构为例:\n```\n#     define ISA_MASK        0x0000000ffffffff8ULL\n#     define ISA_MAGIC_MASK  0x000003f000000001ULL\n#     define ISA_MAGIC_VALUE 0x000001a000000001ULL\n#     define ISA_HAS_CXX_DTOR_BIT 1\n#     define ISA_BITFIELD                                                      \\\n        uintptr_t nonpointer        : 1;                                       \\\n        uintptr_t has_assoc         : 1;                                       \\\n        uintptr_t has_cxx_dtor      : 1;                                       \\\n        uintptr_t shiftcls          : 33; /*MACH_VM_MAX_ADDRESS 0x1000000000*/ \\\n        uintptr_t magic             : 6;                                       \\\n        uintptr_t weakly_referenced : 1;                                       \\\n        uintptr_t unused            : 1;                                       \\\n        uintptr_t has_sidetable_rc  : 1;                                       \\\n        uintptr_t extra_rc          : 19\n#     define RC_ONE   (1ULL<<45)\n#     define RC_HALF  (1ULL<<18)\n```\nshiftcls中存储着Class、Meta-Class对象的内存地址信息，对象的isa指针需要同ISA_MASK经过一次&（按位与)运算才能得出真正的Class对象地址。\n\nISA_MASK：  0x0000000ffffffff8ULL\n二进制：111111111111111111111111111111111000\n\n可以看出ISA_MASK最后三位的值为0，那么任何数同ISA_MASK按位与运算之后，得到的最后三位必定都为0，因此任何类对象或元类对象的内存地址最后三位必定为0，转化为十六进制末位必定为8或者0。这样是因为类的指针要按照字节（8 bits）对齐内存，其指针后三位都是没有意义的0，对齐后可以提高代码运行的性能。\n\n![isa_t](isa_t.png)\n\n### Class\n\n继续查看，我们可以看到，Class其实是一个指向objc_class结构体的指针。\n```\n<objc.h>\n\ntypedef struct objc_class *Class;\n```\n\n而objc_class结构体继承自objc_object。\n\n```\n<objc-runtime-new.h>\n\nstruct objc_class : objc_object {\n    // Class ISA;\n    Class superclass;\n    cache_t cache;             // formerly cache pointer and vtable\n    class_data_bits_t bits;    // class_rw_t * plus custom rr/alloc flags\n\n    class_rw_t *data() const {\n        return bits.data();\n    }\n}\n```\n至此，我们可以得到这样一张关系图：\n\n![class](class.png)\n\n从图中我们可以看到，<b>类其实也是一个对象</b>，除了拥有一个指向类类型的isa指针外，还拥有父类指针、方法缓存和存储类数据的bits指针三个属性。\n\n下面看一下cache_t的结构，最新版的runtime源码中，_bucketsAndMaybeMask代替了之前的buckets_t指针，作为一个散列表，存储方法的imp指针。\n\n每次去寻找方法调用时，会先从对象的方法缓存中进行寻找，提高效率。\n\n```\n<objc-runtime-new.h>\n\nstruct cache_t {\nprivate:\n    explicit_atomic<uintptr_t> _bucketsAndMaybeMask;\n    union {\n        struct {\n            explicit_atomic<mask_t>    _maybeMask;\n#if __LP64__\n            uint16_t                   _flags;\n#endif\n            uint16_t                   _occupied;\n        };\n        explicit_atomic<preopt_cache_t *> _originalPreoptCache;\n    };\n    // _bucketsAndMaybeMask is a buckets_t pointer\n    // _maybeMask is the buckets mask\n}\n\n\nstruct bucket_t {\nprivate:\n    // IMP-first is better for arm64e ptrauth and no worse for arm64.\n    // SEL-first is better for armv7* and i386 and x86_64.\n#if __arm64__\n    explicit_atomic<uintptr_t> _imp;\n    explicit_atomic<SEL> _sel;\n#else\n    explicit_atomic<SEL> _sel;\n    explicit_atomic<uintptr_t> _imp;\n#endif\n}\n```\n\nclass_data_bits_t同样采用了位域技术，注释中我们可以看出，class_data_bits_t相当于class_rw_t * 加上自定义的rr/alloc标志。\n\n通过data方法取到class_rw_t。\n\n```\n<objc-runtime-new.h>\n\n#define FAST_DATA_MASK          0x00007ffffffffff8UL\n\nstruct class_data_bits_t {\n    friend objc_class;\n\n    // Values are the FAST_ flags above.\n    uintptr_t bits;\n\npublic:\n    class_rw_t* data() const {\n        return (class_rw_t *)(bits & FAST_DATA_MASK);\n    }\n\n    const class_ro_t *safe_ro() const {\n        class_rw_t *maybe_rw = data();\n        if (maybe_rw->flags & RW_REALIZED) {\n            // maybe_rw is rw\n            return maybe_rw->ro();\n        } else {\n            // maybe_rw is actually ro\n            return (class_ro_t *)maybe_rw;\n        }\n    }\n}\n```\nclass_rw_t内包含了类的方法列表、属性列表和协议列表，一如其名，是可读写的（read-write)。\n\n```\n<objc-runtime-new.h>\n\nstruct class_rw_t {\n    // Be warned that Symbolication knows the layout of this structure.\n    uint32_t flags;\n    uint16_t witness;\n#if SUPPORT_INDEXED_ISA\n    uint16_t index;\n#endif\n\npublic:\nconst class_ro_t *ro() const {\n        auto v = get_ro_or_rwe();\n        if (slowpath(v.is<class_rw_ext_t *>())) {\n            return v.get<class_rw_ext_t *>(&ro_or_rw_ext)->ro;\n        }\n        return v.get<const class_ro_t *>(&ro_or_rw_ext);\n\n    }\n\n    const method_array_t methods() const {\n        auto v = get_ro_or_rwe();\n        if (v.is<class_rw_ext_t *>()) {\n            return v.get<class_rw_ext_t *>(&ro_or_rw_ext)->methods;\n        } else {\n            return method_array_t{v.get<const class_ro_t *>(&ro_or_rw_ext)->baseMethods()};\n        }\n    }\n\n    const property_array_t properties() const {\n        auto v = get_ro_or_rwe();\n        if (v.is<class_rw_ext_t *>()) {\n            return v.get<class_rw_ext_t *>(&ro_or_rw_ext)->properties;\n        } else {\n            return property_array_t{v.get<const class_ro_t *>(&ro_or_rw_ext)->baseProperties};\n        }\n    }\n\n    const protocol_array_t protocols() const {\n        auto v = get_ro_or_rwe();\n        if (v.is<class_rw_ext_t *>()) {\n            return v.get<class_rw_ext_t *>(&ro_or_rw_ext)->protocols;\n        } else {\n            return protocol_array_t{v.get<const class_ro_t *>(&ro_or_rw_ext)->baseProtocols};\n        }\n    }\n}\n```\n在class_rw_t内还存储了class_ro_t指针。\n```\nstruct class_ro_t {\n    uint32_t flags;\n    uint32_t instanceStart;\n    uint32_t instanceSize;\n#ifdef __LP64__\n    uint32_t reserved;\n#endif\n\n    union {\n        const uint8_t * ivarLayout;\n        Class nonMetaclass;\n    };\n\n    explicit_atomic<const char *> name;\n    // With ptrauth, this is signed if it points to a small list, but\n    // may be unsigned if it points to a big list.\n    void *baseMethodList;\n    protocol_list_t * baseProtocols;\n    const ivar_list_t * ivars;\n\n    const uint8_t * weakIvarLayout;\n    property_list_t *baseProperties;\n}\n```\nclass_ro_t为只读类型，存储了编译期间就确定的类的信息，包括ivar、protocol、property、method等。\n\nclass_ro_t则为读写类型，用于存储在运行时动态绑定的类的信息。\n\n在编译期间class_data_bits_t取到的data实际上为class_ro_t，此时flags指针的RW_REALIZED位为0。\n![ro](ro.png)\n\n在该类真正被实现后，class_data_bits_t取到data实际上才为class_rw_t类型。\n![rw](rw.png)\n\n## 总结\n\n我们可以用下面这张图来进行总结。\n![summary](summary.png)\n\n## 参考文稿\n\nhttps://halfrost.com/objc_runtime_isa_class/#toc-7\n\nhttps://draveness.me/method-struct/","source":"_posts/基于objc4的Runtime原理解读（一）.md","raw":"---\ntitle: 基于objc4的Runtime原理解读（一）\ndate: 2021-11-30 22:45:52\ntags: \n- iOS\n- objective-c\n- runtime\ncategories: iOS\n---\n## 前言\n学习objective-c，runtime一直是一个绕不过去的话题，为什么iOS系统开发选择使用oc而不是c++呢？原因就是runtime这一大利器。\n\n> The Objective-C language defers as many decisions as it can from compile time and link time to runtime. Whenever possible, it does things dynamically. This means that the language requires not just a compiler, but also a runtime system to execute the compiled code. The runtime system acts as a kind of operating system for the Objective-C language; it’s what makes the language work.\n\nRuntime有两个版本，一个Legacy版本 ，一个Modern版本。Legacy版本使用的是Objective-c 1，也是大多数人所了解过的runtime版本，而Modern版本则使用了Objective-c 2.0。\n- iPhone applications and 64-bit programs on OS X v10.5 and later use the modern version of the runtime.\n- Other programs (32-bit programs on OS X desktop) use the legacy version of the runtime.\n\n网上有很多资料介绍的都是Legacy版本下的runtime源码，但实际上现在已经几乎没有任何程序基于此版本的runtime执行了。\n\n接下来的内容，我将以苹果最新开源的[objc4版本的源码](https://opensource.apple.com/source/objc4/)，对runtime相关知识进行介绍。\n\n## 从类说起\n\n### objc_object\n\n```\n<objc-private.h>\n\ntypedef struct objc_class *Class;\ntypedef struct objc_object *id;\n\nstruct objc_object {\nprivate:\n    isa_t isa;\n}\n\n\nunion isa_t {\n    isa_t() { }\n    isa_t(uintptr_t value) : bits(value) { }\n\n    uintptr_t bits;\n\nprivate:\n    // Accessing the class requires custom ptrauth operations, so\n    // force clients to go through setClass/getClass by making this\n    // private.\n    Class cls;\n\npublic:\n#if defined(ISA_BITFIELD)\n    struct {\n        ISA_BITFIELD;  // defined in isa.h\n    };\n\n}\n```\nobjc_object就是oc中最基础的类型，id类型其实也是一个指向objc_object类型的指针。可以看到，objc_object结构体中只有isa_t类型的isa指针。\n\n而isa_t则是一个共用体，里面不止存在指向Class类型的指针cls，还存在bits这样一个指针，使用位域技术存储了更多信息。bits指针根据不同的架构，存储了不同的内容，下面举arm64架构为例:\n```\n#     define ISA_MASK        0x0000000ffffffff8ULL\n#     define ISA_MAGIC_MASK  0x000003f000000001ULL\n#     define ISA_MAGIC_VALUE 0x000001a000000001ULL\n#     define ISA_HAS_CXX_DTOR_BIT 1\n#     define ISA_BITFIELD                                                      \\\n        uintptr_t nonpointer        : 1;                                       \\\n        uintptr_t has_assoc         : 1;                                       \\\n        uintptr_t has_cxx_dtor      : 1;                                       \\\n        uintptr_t shiftcls          : 33; /*MACH_VM_MAX_ADDRESS 0x1000000000*/ \\\n        uintptr_t magic             : 6;                                       \\\n        uintptr_t weakly_referenced : 1;                                       \\\n        uintptr_t unused            : 1;                                       \\\n        uintptr_t has_sidetable_rc  : 1;                                       \\\n        uintptr_t extra_rc          : 19\n#     define RC_ONE   (1ULL<<45)\n#     define RC_HALF  (1ULL<<18)\n```\nshiftcls中存储着Class、Meta-Class对象的内存地址信息，对象的isa指针需要同ISA_MASK经过一次&（按位与)运算才能得出真正的Class对象地址。\n\nISA_MASK：  0x0000000ffffffff8ULL\n二进制：111111111111111111111111111111111000\n\n可以看出ISA_MASK最后三位的值为0，那么任何数同ISA_MASK按位与运算之后，得到的最后三位必定都为0，因此任何类对象或元类对象的内存地址最后三位必定为0，转化为十六进制末位必定为8或者0。这样是因为类的指针要按照字节（8 bits）对齐内存，其指针后三位都是没有意义的0，对齐后可以提高代码运行的性能。\n\n![isa_t](isa_t.png)\n\n### Class\n\n继续查看，我们可以看到，Class其实是一个指向objc_class结构体的指针。\n```\n<objc.h>\n\ntypedef struct objc_class *Class;\n```\n\n而objc_class结构体继承自objc_object。\n\n```\n<objc-runtime-new.h>\n\nstruct objc_class : objc_object {\n    // Class ISA;\n    Class superclass;\n    cache_t cache;             // formerly cache pointer and vtable\n    class_data_bits_t bits;    // class_rw_t * plus custom rr/alloc flags\n\n    class_rw_t *data() const {\n        return bits.data();\n    }\n}\n```\n至此，我们可以得到这样一张关系图：\n\n![class](class.png)\n\n从图中我们可以看到，<b>类其实也是一个对象</b>，除了拥有一个指向类类型的isa指针外，还拥有父类指针、方法缓存和存储类数据的bits指针三个属性。\n\n下面看一下cache_t的结构，最新版的runtime源码中，_bucketsAndMaybeMask代替了之前的buckets_t指针，作为一个散列表，存储方法的imp指针。\n\n每次去寻找方法调用时，会先从对象的方法缓存中进行寻找，提高效率。\n\n```\n<objc-runtime-new.h>\n\nstruct cache_t {\nprivate:\n    explicit_atomic<uintptr_t> _bucketsAndMaybeMask;\n    union {\n        struct {\n            explicit_atomic<mask_t>    _maybeMask;\n#if __LP64__\n            uint16_t                   _flags;\n#endif\n            uint16_t                   _occupied;\n        };\n        explicit_atomic<preopt_cache_t *> _originalPreoptCache;\n    };\n    // _bucketsAndMaybeMask is a buckets_t pointer\n    // _maybeMask is the buckets mask\n}\n\n\nstruct bucket_t {\nprivate:\n    // IMP-first is better for arm64e ptrauth and no worse for arm64.\n    // SEL-first is better for armv7* and i386 and x86_64.\n#if __arm64__\n    explicit_atomic<uintptr_t> _imp;\n    explicit_atomic<SEL> _sel;\n#else\n    explicit_atomic<SEL> _sel;\n    explicit_atomic<uintptr_t> _imp;\n#endif\n}\n```\n\nclass_data_bits_t同样采用了位域技术，注释中我们可以看出，class_data_bits_t相当于class_rw_t * 加上自定义的rr/alloc标志。\n\n通过data方法取到class_rw_t。\n\n```\n<objc-runtime-new.h>\n\n#define FAST_DATA_MASK          0x00007ffffffffff8UL\n\nstruct class_data_bits_t {\n    friend objc_class;\n\n    // Values are the FAST_ flags above.\n    uintptr_t bits;\n\npublic:\n    class_rw_t* data() const {\n        return (class_rw_t *)(bits & FAST_DATA_MASK);\n    }\n\n    const class_ro_t *safe_ro() const {\n        class_rw_t *maybe_rw = data();\n        if (maybe_rw->flags & RW_REALIZED) {\n            // maybe_rw is rw\n            return maybe_rw->ro();\n        } else {\n            // maybe_rw is actually ro\n            return (class_ro_t *)maybe_rw;\n        }\n    }\n}\n```\nclass_rw_t内包含了类的方法列表、属性列表和协议列表，一如其名，是可读写的（read-write)。\n\n```\n<objc-runtime-new.h>\n\nstruct class_rw_t {\n    // Be warned that Symbolication knows the layout of this structure.\n    uint32_t flags;\n    uint16_t witness;\n#if SUPPORT_INDEXED_ISA\n    uint16_t index;\n#endif\n\npublic:\nconst class_ro_t *ro() const {\n        auto v = get_ro_or_rwe();\n        if (slowpath(v.is<class_rw_ext_t *>())) {\n            return v.get<class_rw_ext_t *>(&ro_or_rw_ext)->ro;\n        }\n        return v.get<const class_ro_t *>(&ro_or_rw_ext);\n\n    }\n\n    const method_array_t methods() const {\n        auto v = get_ro_or_rwe();\n        if (v.is<class_rw_ext_t *>()) {\n            return v.get<class_rw_ext_t *>(&ro_or_rw_ext)->methods;\n        } else {\n            return method_array_t{v.get<const class_ro_t *>(&ro_or_rw_ext)->baseMethods()};\n        }\n    }\n\n    const property_array_t properties() const {\n        auto v = get_ro_or_rwe();\n        if (v.is<class_rw_ext_t *>()) {\n            return v.get<class_rw_ext_t *>(&ro_or_rw_ext)->properties;\n        } else {\n            return property_array_t{v.get<const class_ro_t *>(&ro_or_rw_ext)->baseProperties};\n        }\n    }\n\n    const protocol_array_t protocols() const {\n        auto v = get_ro_or_rwe();\n        if (v.is<class_rw_ext_t *>()) {\n            return v.get<class_rw_ext_t *>(&ro_or_rw_ext)->protocols;\n        } else {\n            return protocol_array_t{v.get<const class_ro_t *>(&ro_or_rw_ext)->baseProtocols};\n        }\n    }\n}\n```\n在class_rw_t内还存储了class_ro_t指针。\n```\nstruct class_ro_t {\n    uint32_t flags;\n    uint32_t instanceStart;\n    uint32_t instanceSize;\n#ifdef __LP64__\n    uint32_t reserved;\n#endif\n\n    union {\n        const uint8_t * ivarLayout;\n        Class nonMetaclass;\n    };\n\n    explicit_atomic<const char *> name;\n    // With ptrauth, this is signed if it points to a small list, but\n    // may be unsigned if it points to a big list.\n    void *baseMethodList;\n    protocol_list_t * baseProtocols;\n    const ivar_list_t * ivars;\n\n    const uint8_t * weakIvarLayout;\n    property_list_t *baseProperties;\n}\n```\nclass_ro_t为只读类型，存储了编译期间就确定的类的信息，包括ivar、protocol、property、method等。\n\nclass_ro_t则为读写类型，用于存储在运行时动态绑定的类的信息。\n\n在编译期间class_data_bits_t取到的data实际上为class_ro_t，此时flags指针的RW_REALIZED位为0。\n![ro](ro.png)\n\n在该类真正被实现后，class_data_bits_t取到data实际上才为class_rw_t类型。\n![rw](rw.png)\n\n## 总结\n\n我们可以用下面这张图来进行总结。\n![summary](summary.png)\n\n## 参考文稿\n\nhttps://halfrost.com/objc_runtime_isa_class/#toc-7\n\nhttps://draveness.me/method-struct/","slug":"基于objc4的Runtime原理解读（一）","published":1,"updated":"2021-12-06T12:41:10.205Z","_id":"ckwm7vn0v000027mjbhlzg4zl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>学习objective-c，runtime一直是一个绕不过去的话题，为什么iOS系统开发选择使用oc而不是c++呢？原因就是runtime这一大利器。</p>\n<blockquote>\n<p>The Objective-C language defers as many decisions as it can from compile time and link time to runtime. Whenever possible, it does things dynamically. This means that the language requires not just a compiler, but also a runtime system to execute the compiled code. The runtime system acts as a kind of operating system for the Objective-C language; it’s what makes the language work.</p>\n</blockquote>\n<p>Runtime有两个版本，一个Legacy版本 ，一个Modern版本。Legacy版本使用的是Objective-c 1，也是大多数人所了解过的runtime版本，而Modern版本则使用了Objective-c 2.0。</p>\n<ul>\n<li>iPhone applications and 64-bit programs on OS X v10.5 and later use the modern version of the runtime.</li>\n<li>Other programs (32-bit programs on OS X desktop) use the legacy version of the runtime.</li>\n</ul>\n<p>网上有很多资料介绍的都是Legacy版本下的runtime源码，但实际上现在已经几乎没有任何程序基于此版本的runtime执行了。</p>\n<p>接下来的内容，我将以苹果最新开源的<a href=\"https://opensource.apple.com/source/objc4/\">objc4版本的源码</a>，对runtime相关知识进行介绍。</p>\n<h2 id=\"从类说起\"><a href=\"#从类说起\" class=\"headerlink\" title=\"从类说起\"></a>从类说起</h2><h3 id=\"objc-object\"><a href=\"#objc-object\" class=\"headerlink\" title=\"objc_object\"></a>objc_object</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;objc-private.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct objc_class *Class;</span><br><span class=\"line\">typedef struct objc_object *id;</span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_object &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    isa_t isa;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">union isa_t &#123;</span><br><span class=\"line\">    isa_t() &#123; &#125;</span><br><span class=\"line\">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    uintptr_t bits;</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    &#x2F;&#x2F; Accessing the class requires custom ptrauth operations, so</span><br><span class=\"line\">    &#x2F;&#x2F; force clients to go through setClass&#x2F;getClass by making this</span><br><span class=\"line\">    &#x2F;&#x2F; private.</span><br><span class=\"line\">    Class cls;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">#if defined(ISA_BITFIELD)</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">        ISA_BITFIELD;  &#x2F;&#x2F; defined in isa.h</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>objc_object就是oc中最基础的类型，id类型其实也是一个指向objc_object类型的指针。可以看到，objc_object结构体中只有isa_t类型的isa指针。</p>\n<p>而isa_t则是一个共用体，里面不止存在指向Class类型的指针cls，还存在bits这样一个指针，使用位域技术存储了更多信息。bits指针根据不同的架构，存储了不同的内容，下面举arm64架构为例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#     define ISA_MASK        0x0000000ffffffff8ULL</span><br><span class=\"line\">#     define ISA_MAGIC_MASK  0x000003f000000001ULL</span><br><span class=\"line\">#     define ISA_MAGIC_VALUE 0x000001a000000001ULL</span><br><span class=\"line\">#     define ISA_HAS_CXX_DTOR_BIT 1</span><br><span class=\"line\">#     define ISA_BITFIELD                                                      \\</span><br><span class=\"line\">        uintptr_t nonpointer        : 1;                                       \\</span><br><span class=\"line\">        uintptr_t has_assoc         : 1;                                       \\</span><br><span class=\"line\">        uintptr_t has_cxx_dtor      : 1;                                       \\</span><br><span class=\"line\">        uintptr_t shiftcls          : 33; &#x2F;*MACH_VM_MAX_ADDRESS 0x1000000000*&#x2F; \\</span><br><span class=\"line\">        uintptr_t magic             : 6;                                       \\</span><br><span class=\"line\">        uintptr_t weakly_referenced : 1;                                       \\</span><br><span class=\"line\">        uintptr_t unused            : 1;                                       \\</span><br><span class=\"line\">        uintptr_t has_sidetable_rc  : 1;                                       \\</span><br><span class=\"line\">        uintptr_t extra_rc          : 19</span><br><span class=\"line\">#     define RC_ONE   (1ULL&lt;&lt;45)</span><br><span class=\"line\">#     define RC_HALF  (1ULL&lt;&lt;18)</span><br></pre></td></tr></table></figure>\n<p>shiftcls中存储着Class、Meta-Class对象的内存地址信息，对象的isa指针需要同ISA_MASK经过一次&amp;（按位与)运算才能得出真正的Class对象地址。</p>\n<p>ISA_MASK：  0x0000000ffffffff8ULL<br>二进制：111111111111111111111111111111111000</p>\n<p>可以看出ISA_MASK最后三位的值为0，那么任何数同ISA_MASK按位与运算之后，得到的最后三位必定都为0，因此任何类对象或元类对象的内存地址最后三位必定为0，转化为十六进制末位必定为8或者0。这样是因为类的指针要按照字节（8 bits）对齐内存，其指针后三位都是没有意义的0，对齐后可以提高代码运行的性能。</p>\n<p><img src=\"isa_t.png\" alt=\"isa_t\"></p>\n<h3 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h3><p>继续查看，我们可以看到，Class其实是一个指向objc_class结构体的指针。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;objc.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure>\n\n<p>而objc_class结构体继承自objc_object。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;objc-runtime-new.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_class : objc_object &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Class ISA;</span><br><span class=\"line\">    Class superclass;</span><br><span class=\"line\">    cache_t cache;             &#x2F;&#x2F; formerly cache pointer and vtable</span><br><span class=\"line\">    class_data_bits_t bits;    &#x2F;&#x2F; class_rw_t * plus custom rr&#x2F;alloc flags</span><br><span class=\"line\"></span><br><span class=\"line\">    class_rw_t *data() const &#123;</span><br><span class=\"line\">        return bits.data();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，我们可以得到这样一张关系图：</p>\n<p><img src=\"class.png\" alt=\"class\"></p>\n<p>从图中我们可以看到，<b>类其实也是一个对象</b>，除了拥有一个指向类类型的isa指针外，还拥有父类指针、方法缓存和存储类数据的bits指针三个属性。</p>\n<p>下面看一下cache_t的结构，最新版的runtime源码中，_bucketsAndMaybeMask代替了之前的buckets_t指针，作为一个散列表，存储方法的imp指针。</p>\n<p>每次去寻找方法调用时，会先从对象的方法缓存中进行寻找，提高效率。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;objc-runtime-new.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">struct cache_t &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    explicit_atomic&lt;uintptr_t&gt; _bucketsAndMaybeMask;</span><br><span class=\"line\">    union &#123;</span><br><span class=\"line\">        struct &#123;</span><br><span class=\"line\">            explicit_atomic&lt;mask_t&gt;    _maybeMask;</span><br><span class=\"line\">#if __LP64__</span><br><span class=\"line\">            uint16_t                   _flags;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">            uint16_t                   _occupied;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        explicit_atomic&lt;preopt_cache_t *&gt; _originalPreoptCache;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    &#x2F;&#x2F; _bucketsAndMaybeMask is a buckets_t pointer</span><br><span class=\"line\">    &#x2F;&#x2F; _maybeMask is the buckets mask</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">struct bucket_t &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    &#x2F;&#x2F; IMP-first is better for arm64e ptrauth and no worse for arm64.</span><br><span class=\"line\">    &#x2F;&#x2F; SEL-first is better for armv7* and i386 and x86_64.</span><br><span class=\"line\">#if __arm64__</span><br><span class=\"line\">    explicit_atomic&lt;uintptr_t&gt; _imp;</span><br><span class=\"line\">    explicit_atomic&lt;SEL&gt; _sel;</span><br><span class=\"line\">#else</span><br><span class=\"line\">    explicit_atomic&lt;SEL&gt; _sel;</span><br><span class=\"line\">    explicit_atomic&lt;uintptr_t&gt; _imp;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>class_data_bits_t同样采用了位域技术，注释中我们可以看出，class_data_bits_t相当于class_rw_t * 加上自定义的rr/alloc标志。</p>\n<p>通过data方法取到class_rw_t。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;objc-runtime-new.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define FAST_DATA_MASK          0x00007ffffffffff8UL</span><br><span class=\"line\"></span><br><span class=\"line\">struct class_data_bits_t &#123;</span><br><span class=\"line\">    friend objc_class;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Values are the FAST_ flags above.</span><br><span class=\"line\">    uintptr_t bits;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    class_rw_t* data() const &#123;</span><br><span class=\"line\">        return (class_rw_t *)(bits &amp; FAST_DATA_MASK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const class_ro_t *safe_ro() const &#123;</span><br><span class=\"line\">        class_rw_t *maybe_rw &#x3D; data();</span><br><span class=\"line\">        if (maybe_rw-&gt;flags &amp; RW_REALIZED) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; maybe_rw is rw</span><br><span class=\"line\">            return maybe_rw-&gt;ro();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; maybe_rw is actually ro</span><br><span class=\"line\">            return (class_ro_t *)maybe_rw;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>class_rw_t内包含了类的方法列表、属性列表和协议列表，一如其名，是可读写的（read-write)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;objc-runtime-new.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">struct class_rw_t &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Be warned that Symbolication knows the layout of this structure.</span><br><span class=\"line\">    uint32_t flags;</span><br><span class=\"line\">    uint16_t witness;</span><br><span class=\"line\">#if SUPPORT_INDEXED_ISA</span><br><span class=\"line\">    uint16_t index;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">const class_ro_t *ro() const &#123;</span><br><span class=\"line\">        auto v &#x3D; get_ro_or_rwe();</span><br><span class=\"line\">        if (slowpath(v.is&lt;class_rw_ext_t *&gt;())) &#123;</span><br><span class=\"line\">            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;ro;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const method_array_t methods() const &#123;</span><br><span class=\"line\">        auto v &#x3D; get_ro_or_rwe();</span><br><span class=\"line\">        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;</span><br><span class=\"line\">            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;methods;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return method_array_t&#123;v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext)-&gt;baseMethods()&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const property_array_t properties() const &#123;</span><br><span class=\"line\">        auto v &#x3D; get_ro_or_rwe();</span><br><span class=\"line\">        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;</span><br><span class=\"line\">            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;properties;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return property_array_t&#123;v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext)-&gt;baseProperties&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const protocol_array_t protocols() const &#123;</span><br><span class=\"line\">        auto v &#x3D; get_ro_or_rwe();</span><br><span class=\"line\">        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;</span><br><span class=\"line\">            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;protocols;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return protocol_array_t&#123;v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext)-&gt;baseProtocols&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在class_rw_t内还存储了class_ro_t指针。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct class_ro_t &#123;</span><br><span class=\"line\">    uint32_t flags;</span><br><span class=\"line\">    uint32_t instanceStart;</span><br><span class=\"line\">    uint32_t instanceSize;</span><br><span class=\"line\">#ifdef __LP64__</span><br><span class=\"line\">    uint32_t reserved;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">    union &#123;</span><br><span class=\"line\">        const uint8_t * ivarLayout;</span><br><span class=\"line\">        Class nonMetaclass;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    explicit_atomic&lt;const char *&gt; name;</span><br><span class=\"line\">    &#x2F;&#x2F; With ptrauth, this is signed if it points to a small list, but</span><br><span class=\"line\">    &#x2F;&#x2F; may be unsigned if it points to a big list.</span><br><span class=\"line\">    void *baseMethodList;</span><br><span class=\"line\">    protocol_list_t * baseProtocols;</span><br><span class=\"line\">    const ivar_list_t * ivars;</span><br><span class=\"line\"></span><br><span class=\"line\">    const uint8_t * weakIvarLayout;</span><br><span class=\"line\">    property_list_t *baseProperties;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>class_ro_t为只读类型，存储了编译期间就确定的类的信息，包括ivar、protocol、property、method等。</p>\n<p>class_ro_t则为读写类型，用于存储在运行时动态绑定的类的信息。</p>\n<p>在编译期间class_data_bits_t取到的data实际上为class_ro_t，此时flags指针的RW_REALIZED位为0。<br><img src=\"ro.png\" alt=\"ro\"></p>\n<p>在该类真正被实现后，class_data_bits_t取到data实际上才为class_rw_t类型。<br><img src=\"rw.png\" alt=\"rw\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们可以用下面这张图来进行总结。<br><img src=\"summary.png\" alt=\"summary\"></p>\n<h2 id=\"参考文稿\"><a href=\"#参考文稿\" class=\"headerlink\" title=\"参考文稿\"></a>参考文稿</h2><p><a href=\"https://halfrost.com/objc_runtime_isa_class/#toc-7\">https://halfrost.com/objc_runtime_isa_class/#toc-7</a></p>\n<p><a href=\"https://draveness.me/method-struct/\">https://draveness.me/method-struct/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>学习objective-c，runtime一直是一个绕不过去的话题，为什么iOS系统开发选择使用oc而不是c++呢？原因就是runtime这一大利器。</p>\n<blockquote>\n<p>The Objective-C language defers as many decisions as it can from compile time and link time to runtime. Whenever possible, it does things dynamically. This means that the language requires not just a compiler, but also a runtime system to execute the compiled code. The runtime system acts as a kind of operating system for the Objective-C language; it’s what makes the language work.</p>\n</blockquote>\n<p>Runtime有两个版本，一个Legacy版本 ，一个Modern版本。Legacy版本使用的是Objective-c 1，也是大多数人所了解过的runtime版本，而Modern版本则使用了Objective-c 2.0。</p>\n<ul>\n<li>iPhone applications and 64-bit programs on OS X v10.5 and later use the modern version of the runtime.</li>\n<li>Other programs (32-bit programs on OS X desktop) use the legacy version of the runtime.</li>\n</ul>\n<p>网上有很多资料介绍的都是Legacy版本下的runtime源码，但实际上现在已经几乎没有任何程序基于此版本的runtime执行了。</p>\n<p>接下来的内容，我将以苹果最新开源的<a href=\"https://opensource.apple.com/source/objc4/\">objc4版本的源码</a>，对runtime相关知识进行介绍。</p>\n<h2 id=\"从类说起\"><a href=\"#从类说起\" class=\"headerlink\" title=\"从类说起\"></a>从类说起</h2><h3 id=\"objc-object\"><a href=\"#objc-object\" class=\"headerlink\" title=\"objc_object\"></a>objc_object</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;objc-private.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct objc_class *Class;</span><br><span class=\"line\">typedef struct objc_object *id;</span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_object &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    isa_t isa;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">union isa_t &#123;</span><br><span class=\"line\">    isa_t() &#123; &#125;</span><br><span class=\"line\">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    uintptr_t bits;</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    &#x2F;&#x2F; Accessing the class requires custom ptrauth operations, so</span><br><span class=\"line\">    &#x2F;&#x2F; force clients to go through setClass&#x2F;getClass by making this</span><br><span class=\"line\">    &#x2F;&#x2F; private.</span><br><span class=\"line\">    Class cls;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">#if defined(ISA_BITFIELD)</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">        ISA_BITFIELD;  &#x2F;&#x2F; defined in isa.h</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>objc_object就是oc中最基础的类型，id类型其实也是一个指向objc_object类型的指针。可以看到，objc_object结构体中只有isa_t类型的isa指针。</p>\n<p>而isa_t则是一个共用体，里面不止存在指向Class类型的指针cls，还存在bits这样一个指针，使用位域技术存储了更多信息。bits指针根据不同的架构，存储了不同的内容，下面举arm64架构为例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#     define ISA_MASK        0x0000000ffffffff8ULL</span><br><span class=\"line\">#     define ISA_MAGIC_MASK  0x000003f000000001ULL</span><br><span class=\"line\">#     define ISA_MAGIC_VALUE 0x000001a000000001ULL</span><br><span class=\"line\">#     define ISA_HAS_CXX_DTOR_BIT 1</span><br><span class=\"line\">#     define ISA_BITFIELD                                                      \\</span><br><span class=\"line\">        uintptr_t nonpointer        : 1;                                       \\</span><br><span class=\"line\">        uintptr_t has_assoc         : 1;                                       \\</span><br><span class=\"line\">        uintptr_t has_cxx_dtor      : 1;                                       \\</span><br><span class=\"line\">        uintptr_t shiftcls          : 33; &#x2F;*MACH_VM_MAX_ADDRESS 0x1000000000*&#x2F; \\</span><br><span class=\"line\">        uintptr_t magic             : 6;                                       \\</span><br><span class=\"line\">        uintptr_t weakly_referenced : 1;                                       \\</span><br><span class=\"line\">        uintptr_t unused            : 1;                                       \\</span><br><span class=\"line\">        uintptr_t has_sidetable_rc  : 1;                                       \\</span><br><span class=\"line\">        uintptr_t extra_rc          : 19</span><br><span class=\"line\">#     define RC_ONE   (1ULL&lt;&lt;45)</span><br><span class=\"line\">#     define RC_HALF  (1ULL&lt;&lt;18)</span><br></pre></td></tr></table></figure>\n<p>shiftcls中存储着Class、Meta-Class对象的内存地址信息，对象的isa指针需要同ISA_MASK经过一次&amp;（按位与)运算才能得出真正的Class对象地址。</p>\n<p>ISA_MASK：  0x0000000ffffffff8ULL<br>二进制：111111111111111111111111111111111000</p>\n<p>可以看出ISA_MASK最后三位的值为0，那么任何数同ISA_MASK按位与运算之后，得到的最后三位必定都为0，因此任何类对象或元类对象的内存地址最后三位必定为0，转化为十六进制末位必定为8或者0。这样是因为类的指针要按照字节（8 bits）对齐内存，其指针后三位都是没有意义的0，对齐后可以提高代码运行的性能。</p>\n<p><img src=\"isa_t.png\" alt=\"isa_t\"></p>\n<h3 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h3><p>继续查看，我们可以看到，Class其实是一个指向objc_class结构体的指针。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;objc.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure>\n\n<p>而objc_class结构体继承自objc_object。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;objc-runtime-new.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_class : objc_object &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Class ISA;</span><br><span class=\"line\">    Class superclass;</span><br><span class=\"line\">    cache_t cache;             &#x2F;&#x2F; formerly cache pointer and vtable</span><br><span class=\"line\">    class_data_bits_t bits;    &#x2F;&#x2F; class_rw_t * plus custom rr&#x2F;alloc flags</span><br><span class=\"line\"></span><br><span class=\"line\">    class_rw_t *data() const &#123;</span><br><span class=\"line\">        return bits.data();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，我们可以得到这样一张关系图：</p>\n<p><img src=\"class.png\" alt=\"class\"></p>\n<p>从图中我们可以看到，<b>类其实也是一个对象</b>，除了拥有一个指向类类型的isa指针外，还拥有父类指针、方法缓存和存储类数据的bits指针三个属性。</p>\n<p>下面看一下cache_t的结构，最新版的runtime源码中，_bucketsAndMaybeMask代替了之前的buckets_t指针，作为一个散列表，存储方法的imp指针。</p>\n<p>每次去寻找方法调用时，会先从对象的方法缓存中进行寻找，提高效率。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;objc-runtime-new.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">struct cache_t &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    explicit_atomic&lt;uintptr_t&gt; _bucketsAndMaybeMask;</span><br><span class=\"line\">    union &#123;</span><br><span class=\"line\">        struct &#123;</span><br><span class=\"line\">            explicit_atomic&lt;mask_t&gt;    _maybeMask;</span><br><span class=\"line\">#if __LP64__</span><br><span class=\"line\">            uint16_t                   _flags;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">            uint16_t                   _occupied;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        explicit_atomic&lt;preopt_cache_t *&gt; _originalPreoptCache;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    &#x2F;&#x2F; _bucketsAndMaybeMask is a buckets_t pointer</span><br><span class=\"line\">    &#x2F;&#x2F; _maybeMask is the buckets mask</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">struct bucket_t &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    &#x2F;&#x2F; IMP-first is better for arm64e ptrauth and no worse for arm64.</span><br><span class=\"line\">    &#x2F;&#x2F; SEL-first is better for armv7* and i386 and x86_64.</span><br><span class=\"line\">#if __arm64__</span><br><span class=\"line\">    explicit_atomic&lt;uintptr_t&gt; _imp;</span><br><span class=\"line\">    explicit_atomic&lt;SEL&gt; _sel;</span><br><span class=\"line\">#else</span><br><span class=\"line\">    explicit_atomic&lt;SEL&gt; _sel;</span><br><span class=\"line\">    explicit_atomic&lt;uintptr_t&gt; _imp;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>class_data_bits_t同样采用了位域技术，注释中我们可以看出，class_data_bits_t相当于class_rw_t * 加上自定义的rr/alloc标志。</p>\n<p>通过data方法取到class_rw_t。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;objc-runtime-new.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define FAST_DATA_MASK          0x00007ffffffffff8UL</span><br><span class=\"line\"></span><br><span class=\"line\">struct class_data_bits_t &#123;</span><br><span class=\"line\">    friend objc_class;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Values are the FAST_ flags above.</span><br><span class=\"line\">    uintptr_t bits;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    class_rw_t* data() const &#123;</span><br><span class=\"line\">        return (class_rw_t *)(bits &amp; FAST_DATA_MASK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const class_ro_t *safe_ro() const &#123;</span><br><span class=\"line\">        class_rw_t *maybe_rw &#x3D; data();</span><br><span class=\"line\">        if (maybe_rw-&gt;flags &amp; RW_REALIZED) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; maybe_rw is rw</span><br><span class=\"line\">            return maybe_rw-&gt;ro();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; maybe_rw is actually ro</span><br><span class=\"line\">            return (class_ro_t *)maybe_rw;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>class_rw_t内包含了类的方法列表、属性列表和协议列表，一如其名，是可读写的（read-write)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;objc-runtime-new.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">struct class_rw_t &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Be warned that Symbolication knows the layout of this structure.</span><br><span class=\"line\">    uint32_t flags;</span><br><span class=\"line\">    uint16_t witness;</span><br><span class=\"line\">#if SUPPORT_INDEXED_ISA</span><br><span class=\"line\">    uint16_t index;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">const class_ro_t *ro() const &#123;</span><br><span class=\"line\">        auto v &#x3D; get_ro_or_rwe();</span><br><span class=\"line\">        if (slowpath(v.is&lt;class_rw_ext_t *&gt;())) &#123;</span><br><span class=\"line\">            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;ro;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const method_array_t methods() const &#123;</span><br><span class=\"line\">        auto v &#x3D; get_ro_or_rwe();</span><br><span class=\"line\">        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;</span><br><span class=\"line\">            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;methods;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return method_array_t&#123;v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext)-&gt;baseMethods()&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const property_array_t properties() const &#123;</span><br><span class=\"line\">        auto v &#x3D; get_ro_or_rwe();</span><br><span class=\"line\">        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;</span><br><span class=\"line\">            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;properties;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return property_array_t&#123;v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext)-&gt;baseProperties&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const protocol_array_t protocols() const &#123;</span><br><span class=\"line\">        auto v &#x3D; get_ro_or_rwe();</span><br><span class=\"line\">        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;</span><br><span class=\"line\">            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;protocols;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return protocol_array_t&#123;v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext)-&gt;baseProtocols&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在class_rw_t内还存储了class_ro_t指针。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct class_ro_t &#123;</span><br><span class=\"line\">    uint32_t flags;</span><br><span class=\"line\">    uint32_t instanceStart;</span><br><span class=\"line\">    uint32_t instanceSize;</span><br><span class=\"line\">#ifdef __LP64__</span><br><span class=\"line\">    uint32_t reserved;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">    union &#123;</span><br><span class=\"line\">        const uint8_t * ivarLayout;</span><br><span class=\"line\">        Class nonMetaclass;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    explicit_atomic&lt;const char *&gt; name;</span><br><span class=\"line\">    &#x2F;&#x2F; With ptrauth, this is signed if it points to a small list, but</span><br><span class=\"line\">    &#x2F;&#x2F; may be unsigned if it points to a big list.</span><br><span class=\"line\">    void *baseMethodList;</span><br><span class=\"line\">    protocol_list_t * baseProtocols;</span><br><span class=\"line\">    const ivar_list_t * ivars;</span><br><span class=\"line\"></span><br><span class=\"line\">    const uint8_t * weakIvarLayout;</span><br><span class=\"line\">    property_list_t *baseProperties;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>class_ro_t为只读类型，存储了编译期间就确定的类的信息，包括ivar、protocol、property、method等。</p>\n<p>class_ro_t则为读写类型，用于存储在运行时动态绑定的类的信息。</p>\n<p>在编译期间class_data_bits_t取到的data实际上为class_ro_t，此时flags指针的RW_REALIZED位为0。<br><img src=\"ro.png\" alt=\"ro\"></p>\n<p>在该类真正被实现后，class_data_bits_t取到data实际上才为class_rw_t类型。<br><img src=\"rw.png\" alt=\"rw\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们可以用下面这张图来进行总结。<br><img src=\"summary.png\" alt=\"summary\"></p>\n<h2 id=\"参考文稿\"><a href=\"#参考文稿\" class=\"headerlink\" title=\"参考文稿\"></a>参考文稿</h2><p><a href=\"https://halfrost.com/objc_runtime_isa_class/#toc-7\">https://halfrost.com/objc_runtime_isa_class/#toc-7</a></p>\n<p><a href=\"https://draveness.me/method-struct/\">https://draveness.me/method-struct/</a></p>\n"},{"title":"基于objc4的Runtime原理解读（二）","date":"2021-12-06T12:23:03.000Z","_content":"\n## isKindOfClass和isMemberOfClass\n直接看一下这两个方法的实现源码。\n```\n+ (BOOL)isMemberOfClass:(Class)cls {\n    return self->ISA() == cls;\n}\n\n- (BOOL)isMemberOfClass:(Class)cls {\n    return [self class] == cls;\n}\n\n+ (BOOL)isKindOfClass:(Class)cls {\n    for (Class tcls = self->ISA(); tcls; tcls = tcls->getSuperclass()) {\n        if (tcls == cls) return YES;\n    }\n    return NO;\n}\n\n- (BOOL)isKindOfClass:(Class)cls {\n    for (Class tcls = [self class]; tcls; tcls = tcls->getSuperclass()) {\n        if (tcls == cls) return YES;\n    }\n    return NO;\n}\n```\n可以看到，对于类方法和实例方法的实现是有区别的，对于类方法，通过自己的isa指针获取类类型；对于实例方法，则是通过object_getClass获取类类型。\n```\n+ (Class)class {\n    return self;\n}\n\n- (Class)class {\n    return object_getClass(self);\n}\n\nClass object_getClass(id obj)\n{\n    if (obj) return obj->getIsa();\n    else return Nil;\n}\n```\n实际上，object_getClass方法最后也是取的类对象的isa指针，那么问题来了，实例类中isa指针指向了其类对象，那么类对象的isa指针又指向了哪里呢？\n## 类与元类\n至此，“元类”的概念终于浮出水面，我们也得以明白为什么会存在元类这一概念。\n\n类对象的isa指针便指向了其元类，之所以引入元类这一概念，便是为了实例方法和类方法方法寻找逻辑上的统一。\n\n![class](class.png)\n\n正如这张经典的图片所示，实例类的isa指针指向了其类对象，而类对象的isa指针指向了其元类。所有元类的isa指针均指向了根元类NSObject，对于NSObject元类，其isa指向了自己，superclass则指向NSObject类。\n\n在查看元类时，会发现元类的名称和类对象是相同的，但是其地址是不同的，可以通过class_isMetaClass方法进行判断。\n## 测试\n```\n@interface ObjcClass : NSObject\n\n@end\n\nBOOL check1 = [(id)[NSObject class] isKindOfClass:[NSObject class]];\nBOOL check2 = [(id)[NSObject class] isMemberOfClass:[NSObject class]];\nBOOL check3 = [(id)[ObjcClass class] isKindOfClass:[ObjcClass class]];\nBOOL check4 = [(id)[ObjcClass class] isMemberOfClass:[ObjcClass class]];\nBOOL check5 = [(id)[ObjcClass class] isKindOfClass:[NSObject class]];\nBOOL check6 = [(id)[ObjcClass class] isMemberOfClass:[NSObject class]];\n```\n对于这六个BOOL值，应该输出什么呢？\n\n结合之前的源码，+ (BOOL)isKindOfClass:(Class)cls方法内，首先判断传入的cls是否等于其元类，否则一直寻找其superclass，查看是否相等。+ (BOOL)isMemberOfClass:(Class)cls方法内，则直接判断cls的isa指针，即元类是否和cls相等。\n\n那么对于类对象来说，其isa指针和传入的类度对象本身永远不等，所以2、4、6的答案均为NO。\n\n对于check1来说，首先判断[NSObject class]是否和其元类相等，答案是否，之后判断[NSObject class]是否和其元类的superclass相等，根据上述图片可以看到相等，所以check1答案是YES。\n\n对于check3来说，首先判断[ObjcClass class]是否和其元类相等，答案是否，之后判断[ObjcClass class]是否和其元类的superclass，即NSObject元类相等，答案为否，最后判断[ObjcClass class]是否和[NSObject class]相等，答案是否，所以check3的答案是NO。\n\n对于check5来说，首先判断[NSObject class]是否和ObjcClass元类相等，答案是否，之后判断[NSObject class]是否和NSObject元类相等，答案是否，最后判断[NSObject class]是否和[NSObject class]相等，答案为是，所以check5的答案是YES。","source":"_posts/基于objc4的Runtime原理解读（二）.md","raw":"---\ntitle: 基于objc4的Runtime原理解读（二）\ndate: 2021-12-06 20:23:03\ntags:\n- runtime\n- objective-c\n- iOS\ncategories: iOS\n---\n\n## isKindOfClass和isMemberOfClass\n直接看一下这两个方法的实现源码。\n```\n+ (BOOL)isMemberOfClass:(Class)cls {\n    return self->ISA() == cls;\n}\n\n- (BOOL)isMemberOfClass:(Class)cls {\n    return [self class] == cls;\n}\n\n+ (BOOL)isKindOfClass:(Class)cls {\n    for (Class tcls = self->ISA(); tcls; tcls = tcls->getSuperclass()) {\n        if (tcls == cls) return YES;\n    }\n    return NO;\n}\n\n- (BOOL)isKindOfClass:(Class)cls {\n    for (Class tcls = [self class]; tcls; tcls = tcls->getSuperclass()) {\n        if (tcls == cls) return YES;\n    }\n    return NO;\n}\n```\n可以看到，对于类方法和实例方法的实现是有区别的，对于类方法，通过自己的isa指针获取类类型；对于实例方法，则是通过object_getClass获取类类型。\n```\n+ (Class)class {\n    return self;\n}\n\n- (Class)class {\n    return object_getClass(self);\n}\n\nClass object_getClass(id obj)\n{\n    if (obj) return obj->getIsa();\n    else return Nil;\n}\n```\n实际上，object_getClass方法最后也是取的类对象的isa指针，那么问题来了，实例类中isa指针指向了其类对象，那么类对象的isa指针又指向了哪里呢？\n## 类与元类\n至此，“元类”的概念终于浮出水面，我们也得以明白为什么会存在元类这一概念。\n\n类对象的isa指针便指向了其元类，之所以引入元类这一概念，便是为了实例方法和类方法方法寻找逻辑上的统一。\n\n![class](class.png)\n\n正如这张经典的图片所示，实例类的isa指针指向了其类对象，而类对象的isa指针指向了其元类。所有元类的isa指针均指向了根元类NSObject，对于NSObject元类，其isa指向了自己，superclass则指向NSObject类。\n\n在查看元类时，会发现元类的名称和类对象是相同的，但是其地址是不同的，可以通过class_isMetaClass方法进行判断。\n## 测试\n```\n@interface ObjcClass : NSObject\n\n@end\n\nBOOL check1 = [(id)[NSObject class] isKindOfClass:[NSObject class]];\nBOOL check2 = [(id)[NSObject class] isMemberOfClass:[NSObject class]];\nBOOL check3 = [(id)[ObjcClass class] isKindOfClass:[ObjcClass class]];\nBOOL check4 = [(id)[ObjcClass class] isMemberOfClass:[ObjcClass class]];\nBOOL check5 = [(id)[ObjcClass class] isKindOfClass:[NSObject class]];\nBOOL check6 = [(id)[ObjcClass class] isMemberOfClass:[NSObject class]];\n```\n对于这六个BOOL值，应该输出什么呢？\n\n结合之前的源码，+ (BOOL)isKindOfClass:(Class)cls方法内，首先判断传入的cls是否等于其元类，否则一直寻找其superclass，查看是否相等。+ (BOOL)isMemberOfClass:(Class)cls方法内，则直接判断cls的isa指针，即元类是否和cls相等。\n\n那么对于类对象来说，其isa指针和传入的类度对象本身永远不等，所以2、4、6的答案均为NO。\n\n对于check1来说，首先判断[NSObject class]是否和其元类相等，答案是否，之后判断[NSObject class]是否和其元类的superclass相等，根据上述图片可以看到相等，所以check1答案是YES。\n\n对于check3来说，首先判断[ObjcClass class]是否和其元类相等，答案是否，之后判断[ObjcClass class]是否和其元类的superclass，即NSObject元类相等，答案为否，最后判断[ObjcClass class]是否和[NSObject class]相等，答案是否，所以check3的答案是NO。\n\n对于check5来说，首先判断[NSObject class]是否和ObjcClass元类相等，答案是否，之后判断[NSObject class]是否和NSObject元类相等，答案是否，最后判断[NSObject class]是否和[NSObject class]相等，答案为是，所以check5的答案是YES。","slug":"基于objc4的Runtime原理解读（二）","published":1,"updated":"2021-12-07T15:06:21.918Z","_id":"ckwunoxbf00020bmjhcgaapk0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"isKindOfClass和isMemberOfClass\"><a href=\"#isKindOfClass和isMemberOfClass\" class=\"headerlink\" title=\"isKindOfClass和isMemberOfClass\"></a>isKindOfClass和isMemberOfClass</h2><p>直接看一下这两个方法的实现源码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (BOOL)isMemberOfClass:(Class)cls &#123;</span><br><span class=\"line\">    return self-&gt;ISA() &#x3D;&#x3D; cls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isMemberOfClass:(Class)cls &#123;</span><br><span class=\"line\">    return [self class] &#x3D;&#x3D; cls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (BOOL)isKindOfClass:(Class)cls &#123;</span><br><span class=\"line\">    for (Class tcls &#x3D; self-&gt;ISA(); tcls; tcls &#x3D; tcls-&gt;getSuperclass()) &#123;</span><br><span class=\"line\">        if (tcls &#x3D;&#x3D; cls) return YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isKindOfClass:(Class)cls &#123;</span><br><span class=\"line\">    for (Class tcls &#x3D; [self class]; tcls; tcls &#x3D; tcls-&gt;getSuperclass()) &#123;</span><br><span class=\"line\">        if (tcls &#x3D;&#x3D; cls) return YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return NO;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，对于类方法和实例方法的实现是有区别的，对于类方法，通过自己的isa指针获取类类型；对于实例方法，则是通过object_getClass获取类类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (Class)class &#123;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (Class)class &#123;</span><br><span class=\"line\">    return object_getClass(self);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class object_getClass(id obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (obj) return obj-&gt;getIsa();</span><br><span class=\"line\">    else return Nil;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际上，object_getClass方法最后也是取的类对象的isa指针，那么问题来了，实例类中isa指针指向了其类对象，那么类对象的isa指针又指向了哪里呢？</p>\n<h2 id=\"类与元类\"><a href=\"#类与元类\" class=\"headerlink\" title=\"类与元类\"></a>类与元类</h2><p>至此，“元类”的概念终于浮出水面，我们也得以明白为什么会存在元类这一概念。</p>\n<p>类对象的isa指针便指向了其元类，之所以引入元类这一概念，便是为了实例方法和类方法方法寻找逻辑上的统一。</p>\n<p><img src=\"class.png\" alt=\"class\"></p>\n<p>正如这张经典的图片所示，实例类的isa指针指向了其类对象，而类对象的isa指针指向了其元类。所有元类的isa指针均指向了根元类NSObject，对于NSObject元类，其isa指向了自己，superclass则指向NSObject类。</p>\n<p>在查看元类时，会发现元类的名称和类对象是相同的，但是其地址是不同的，可以通过class_isMetaClass方法进行判断。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface ObjcClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL check1 &#x3D; [(id)[NSObject class] isKindOfClass:[NSObject class]];</span><br><span class=\"line\">BOOL check2 &#x3D; [(id)[NSObject class] isMemberOfClass:[NSObject class]];</span><br><span class=\"line\">BOOL check3 &#x3D; [(id)[ObjcClass class] isKindOfClass:[ObjcClass class]];</span><br><span class=\"line\">BOOL check4 &#x3D; [(id)[ObjcClass class] isMemberOfClass:[ObjcClass class]];</span><br><span class=\"line\">BOOL check5 &#x3D; [(id)[ObjcClass class] isKindOfClass:[NSObject class]];</span><br><span class=\"line\">BOOL check6 &#x3D; [(id)[ObjcClass class] isMemberOfClass:[NSObject class]];</span><br></pre></td></tr></table></figure>\n<p>对于这六个BOOL值，应该输出什么呢？</p>\n<p>结合之前的源码，+ (BOOL)isKindOfClass:(Class)cls方法内，首先判断传入的cls是否等于其元类，否则一直寻找其superclass，查看是否相等。+ (BOOL)isMemberOfClass:(Class)cls方法内，则直接判断cls的isa指针，即元类是否和cls相等。</p>\n<p>那么对于类对象来说，其isa指针和传入的类度对象本身永远不等，所以2、4、6的答案均为NO。</p>\n<p>对于check1来说，首先判断[NSObject class]是否和其元类相等，答案是否，之后判断[NSObject class]是否和其元类的superclass相等，根据上述图片可以看到相等，所以check1答案是YES。</p>\n<p>对于check3来说，首先判断[ObjcClass class]是否和其元类相等，答案是否，之后判断[ObjcClass class]是否和其元类的superclass，即NSObject元类相等，答案为否，最后判断[ObjcClass class]是否和[NSObject class]相等，答案是否，所以check3的答案是NO。</p>\n<p>对于check5来说，首先判断[NSObject class]是否和ObjcClass元类相等，答案是否，之后判断[NSObject class]是否和NSObject元类相等，答案是否，最后判断[NSObject class]是否和[NSObject class]相等，答案为是，所以check5的答案是YES。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"isKindOfClass和isMemberOfClass\"><a href=\"#isKindOfClass和isMemberOfClass\" class=\"headerlink\" title=\"isKindOfClass和isMemberOfClass\"></a>isKindOfClass和isMemberOfClass</h2><p>直接看一下这两个方法的实现源码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (BOOL)isMemberOfClass:(Class)cls &#123;</span><br><span class=\"line\">    return self-&gt;ISA() &#x3D;&#x3D; cls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isMemberOfClass:(Class)cls &#123;</span><br><span class=\"line\">    return [self class] &#x3D;&#x3D; cls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (BOOL)isKindOfClass:(Class)cls &#123;</span><br><span class=\"line\">    for (Class tcls &#x3D; self-&gt;ISA(); tcls; tcls &#x3D; tcls-&gt;getSuperclass()) &#123;</span><br><span class=\"line\">        if (tcls &#x3D;&#x3D; cls) return YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isKindOfClass:(Class)cls &#123;</span><br><span class=\"line\">    for (Class tcls &#x3D; [self class]; tcls; tcls &#x3D; tcls-&gt;getSuperclass()) &#123;</span><br><span class=\"line\">        if (tcls &#x3D;&#x3D; cls) return YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return NO;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，对于类方法和实例方法的实现是有区别的，对于类方法，通过自己的isa指针获取类类型；对于实例方法，则是通过object_getClass获取类类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (Class)class &#123;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (Class)class &#123;</span><br><span class=\"line\">    return object_getClass(self);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class object_getClass(id obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (obj) return obj-&gt;getIsa();</span><br><span class=\"line\">    else return Nil;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际上，object_getClass方法最后也是取的类对象的isa指针，那么问题来了，实例类中isa指针指向了其类对象，那么类对象的isa指针又指向了哪里呢？</p>\n<h2 id=\"类与元类\"><a href=\"#类与元类\" class=\"headerlink\" title=\"类与元类\"></a>类与元类</h2><p>至此，“元类”的概念终于浮出水面，我们也得以明白为什么会存在元类这一概念。</p>\n<p>类对象的isa指针便指向了其元类，之所以引入元类这一概念，便是为了实例方法和类方法方法寻找逻辑上的统一。</p>\n<p><img src=\"class.png\" alt=\"class\"></p>\n<p>正如这张经典的图片所示，实例类的isa指针指向了其类对象，而类对象的isa指针指向了其元类。所有元类的isa指针均指向了根元类NSObject，对于NSObject元类，其isa指向了自己，superclass则指向NSObject类。</p>\n<p>在查看元类时，会发现元类的名称和类对象是相同的，但是其地址是不同的，可以通过class_isMetaClass方法进行判断。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface ObjcClass : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL check1 &#x3D; [(id)[NSObject class] isKindOfClass:[NSObject class]];</span><br><span class=\"line\">BOOL check2 &#x3D; [(id)[NSObject class] isMemberOfClass:[NSObject class]];</span><br><span class=\"line\">BOOL check3 &#x3D; [(id)[ObjcClass class] isKindOfClass:[ObjcClass class]];</span><br><span class=\"line\">BOOL check4 &#x3D; [(id)[ObjcClass class] isMemberOfClass:[ObjcClass class]];</span><br><span class=\"line\">BOOL check5 &#x3D; [(id)[ObjcClass class] isKindOfClass:[NSObject class]];</span><br><span class=\"line\">BOOL check6 &#x3D; [(id)[ObjcClass class] isMemberOfClass:[NSObject class]];</span><br></pre></td></tr></table></figure>\n<p>对于这六个BOOL值，应该输出什么呢？</p>\n<p>结合之前的源码，+ (BOOL)isKindOfClass:(Class)cls方法内，首先判断传入的cls是否等于其元类，否则一直寻找其superclass，查看是否相等。+ (BOOL)isMemberOfClass:(Class)cls方法内，则直接判断cls的isa指针，即元类是否和cls相等。</p>\n<p>那么对于类对象来说，其isa指针和传入的类度对象本身永远不等，所以2、4、6的答案均为NO。</p>\n<p>对于check1来说，首先判断[NSObject class]是否和其元类相等，答案是否，之后判断[NSObject class]是否和其元类的superclass相等，根据上述图片可以看到相等，所以check1答案是YES。</p>\n<p>对于check3来说，首先判断[ObjcClass class]是否和其元类相等，答案是否，之后判断[ObjcClass class]是否和其元类的superclass，即NSObject元类相等，答案为否，最后判断[ObjcClass class]是否和[NSObject class]相等，答案是否，所以check3的答案是NO。</p>\n<p>对于check5来说，首先判断[NSObject class]是否和ObjcClass元类相等，答案是否，之后判断[NSObject class]是否和NSObject元类相等，答案是否，最后判断[NSObject class]是否和[NSObject class]相等，答案为是，所以check5的答案是YES。</p>\n"}],"PostAsset":[{"_id":"source/_posts/基于objc4的Runtime原理解读（一）/isa_t.png","slug":"isa_t.png","post":"ckwm7vn0v000027mjbhlzg4zl","modified":0,"renderable":0},{"_id":"source/_posts/基于objc4的Runtime原理解读（一）/class.png","slug":"class.png","post":"ckwm7vn0v000027mjbhlzg4zl","modified":0,"renderable":0},{"_id":"source/_posts/基于objc4的Runtime原理解读（一）/ro.png","slug":"ro.png","post":"ckwm7vn0v000027mjbhlzg4zl","modified":0,"renderable":0},{"_id":"source/_posts/基于objc4的Runtime原理解读（一）/rw.png","slug":"rw.png","post":"ckwm7vn0v000027mjbhlzg4zl","modified":0,"renderable":0},{"_id":"source/_posts/基于objc4的Runtime原理解读（一）/summary.png","slug":"summary.png","post":"ckwm7vn0v000027mjbhlzg4zl","modified":0,"renderable":0},{"_id":"source/_posts/基于objc4的Runtime原理解读（二）/class.png","slug":"class.png","post":"ckwunoxbf00020bmjhcgaapk0","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckw56w0wh0000j8t80sob8nzw","category_id":"ckwunoxbd00000bmjdueq4nij","_id":"ckwunoxbh00050bmj5uzzdsn0"},{"post_id":"ckwm7vn0v000027mjbhlzg4zl","category_id":"ckwunoxbg00030bmjb84hbuje","_id":"ckwunoxbi00090bmjfplg6qsx"},{"post_id":"ckwunoxbf00020bmjhcgaapk0","category_id":"ckwunoxbg00030bmjb84hbuje","_id":"ckww8jn9k0002cumjc9bjglqm"}],"PostTag":[{"post_id":"ckw56w0wh0000j8t80sob8nzw","tag_id":"ckw56w0wn0001j8t8drkghc60","_id":"ckw56w0wp0002j8t87grzhlug"},{"post_id":"ckwm7vn0v000027mjbhlzg4zl","tag_id":"ckwnmuim80000mqmjam4tcwd8","_id":"ckwnmuimc0001mqmj7nm72nyv"},{"post_id":"ckw56w0wh0000j8t80sob8nzw","tag_id":"ckwunoxbf00010bmjcpttafqw","_id":"ckwunoxbi00070bmj9bp2d4wk"},{"post_id":"ckw56w0wh0000j8t80sob8nzw","tag_id":"ckwunoxbh00040bmj8jxwbu77","_id":"ckwunoxbi00080bmjewtwgtsq"},{"post_id":"ckwm7vn0v000027mjbhlzg4zl","tag_id":"ckwunoxbh00060bmj0253d5wy","_id":"ckwunoxbi000b0bmj3rd7en30"},{"post_id":"ckwm7vn0v000027mjbhlzg4zl","tag_id":"ckwunoxbi000a0bmjbaoc05yy","_id":"ckwunoxbi000c0bmjd3sgcv6g"},{"post_id":"ckwunoxbf00020bmjhcgaapk0","tag_id":"ckwunoxbi000a0bmjbaoc05yy","_id":"ckww8jn9j0000cumj2hw66uqp"},{"post_id":"ckwunoxbf00020bmjhcgaapk0","tag_id":"ckwunoxbh00060bmj0253d5wy","_id":"ckww8jn9k0001cumjah7tf4z6"},{"post_id":"ckwunoxbf00020bmjhcgaapk0","tag_id":"ckwnmuim80000mqmjam4tcwd8","_id":"ckww8jn9k0003cumj223f3n6p"}],"Tag":[{"name":"none","_id":"ckf3jddlb0001xhnjhq3s0gus"},{"name":"Linux","_id":"ckw56w0wn0001j8t8drkghc60"},{"name":"iOS","_id":"ckwnmuim80000mqmjam4tcwd8"},{"name":"CLion","_id":"ckwunoxbf00010bmjcpttafqw"},{"name":"WSL","_id":"ckwunoxbh00040bmj8jxwbu77"},{"name":"objective-c","_id":"ckwunoxbh00060bmj0253d5wy"},{"name":"runtime","_id":"ckwunoxbi000a0bmjbaoc05yy"}]}}